;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name loom.graph, :imports nil, :requires {loom.alg-generic loom.alg-generic}, :uses {bf-traverse loom.alg-generic}, :defs {Graph {:meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 14, :column 14, :end-line 14, :end-column 19, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {nodes [[g]], edges [[g]], has-node? [[g node]], has-edge? [[g n1 n2]], successors [[g] [g node]], out-degree [[g node]], out-edges [[g] [g node]]}}}, :protocol-symbol true, :name loom.graph/Graph, :file "public/js/loom/graph.cljc", :end-column 19, :column 1, :line 14, :protocol-info {:methods {nodes [[g]], edges [[g]], has-node? [[g node]], has-edge? [[g n1 n2]], successors [[g] [g node]], out-degree [[g node]], out-edges [[g] [g node]]}}, :info nil, :end-line 14, :impls #{loom.graph/BasicEditableWeightedDigraph loom.graph/BasicEditableWeightedGraph loom.graph/WeightedFlyGraph loom.graph/FlyGraph loom.graph/WeightedFlyDigraph loom.graph/FlyDigraph loom.graph/BasicEditableGraph loom.graph/BasicEditableDigraph}, :doc nil, :jsdoc ("@interface")}, default-weighted-graph-impl {:name loom.graph/default-weighted-graph-impl, :file "public/js/loom/graph.cljc", :line 144, :column 1, :end-line 144, :end-column 33, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 144, :column 6, :end-line 144, :end-column 33}}, has-node? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 17, :column 4, :end-line 17, :end-column 13, :protocol loom.graph/Graph, :doc "Returns true when node is in g", :arglists (quote ([g node]))}, :protocol loom.graph/Graph, :name loom.graph/has-node?, :variadic false, :file "public/js/loom/graph.cljc", :end-column 13, :method-params ([g node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g node])), :doc "Returns true when node is in g"}, directed? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 584, :column 7, :end-line 584, :end-column 16, :arglists (quote ([g])), :doc "Returns true if g satisfies the Digraph protocol"}, :name loom.graph/directed?, :variadic false, :file "public/js/loom/graph.cljc", :end-column 16, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 584, :end-line 584, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns true if g satisfies the Digraph protocol"}, weighted? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 589, :column 7, :end-line 589, :end-column 16, :arglists (quote ([g])), :doc "Returns true if g satisfies the WeightedGraph protocol"}, :name loom.graph/weighted?, :variadic false, :file "public/js/loom/graph.cljc", :end-column 16, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 589, :end-line 589, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns true if g satisfies the WeightedGraph protocol"}, dest {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 43, :column 4, :end-line 43, :end-column 8, :protocol loom.graph/Edge, :doc "Returns the dest node of the edge", :arglists (quote ([edge]))}, :protocol loom.graph/Edge, :name loom.graph/dest, :variadic false, :file "public/js/loom/graph.cljc", :end-column 8, :method-params ([edge]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edge])), :doc "Returns the dest node of the edge"}, map->BasicEditableWeightedDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 333, :column 2, :end-line 333, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__649770]))}, :name loom.graph/map->BasicEditableWeightedDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 30, :method-params ([G__649770]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 332, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649770]))}, ->BasicEditableGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 168, :column 2, :end-line 168, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([nodeset adj]))}, :name loom.graph/->BasicEditableGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 20, :method-params ([nodeset adj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 167, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodeset adj]))}, edges {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 16, :column 4, :end-line 16, :end-column 9, :protocol loom.graph/Graph, :doc "Edges in g. May return each edge twice in an undirected graph", :arglists (quote ([g]))}, :protocol loom.graph/Graph, :name loom.graph/edges, :variadic false, :file "public/js/loom/graph.cljc", :end-column 9, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Edges in g. May return each edge twice in an undirected graph"}, add-nodes {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 64, :column 7, :end-line 64, :end-column 16, :arglists (quote ([g & nodes])), :doc "Adds nodes to graph g. Nodes can be any type of object", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}}, :name loom.graph/add-nodes, :variadic true, :file "public/js/loom/graph.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}, :method-params [(g nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists ([g & nodes]), :doc "Adds nodes to graph g. Nodes can be any type of object"}, remove-nodes {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 76, :column 7, :end-line 76, :end-column 19, :arglists (quote ([g & nodes])), :doc "Removes nodes from graph g", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}}, :name loom.graph/remove-nodes, :variadic true, :file "public/js/loom/graph.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}, :method-params [(g nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists ([g & nodes]), :doc "Removes nodes from graph g"}, default-digraph-impl {:name loom.graph/default-digraph-impl, :file "public/js/loom/graph.cljc", :line 134, :column 1, :end-line 134, :end-column 26, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 134, :column 6, :end-line 134, :end-column 26}}, FlyDigraph {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable loom.graph/Digraph cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name loom.graph/FlyDigraph, :file "public/js/loom/graph.cljc", :end-column 12, :type true, :column 2, :internal-ctor true, :line 476, :record true, :end-line 476, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, add-edges {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 69, :column 7, :end-line 69, :end-column 16, :arglists (quote ([g & edges])), :doc "Adds edges to graph g. For unweighted graphs, edges take the form [n1 n2].\n  For weighted graphs, edges take the form [n1 n2 weight] or [n1 n2], the\n  latter defaulting to a weight of 1", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g edges)], :arglists ([g & edges]), :arglists-meta (nil)}}, :name loom.graph/add-edges, :variadic true, :file "public/js/loom/graph.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g edges)], :arglists ([g & edges]), :arglists-meta (nil)}, :method-params [(g edges)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists ([g & edges]), :doc "Adds edges to graph g. For unweighted graphs, edges take the form [n1 n2].\n  For weighted graphs, edges take the form [n1 n2 weight] or [n1 n2], the\n  latter defaulting to a weight of 1"}, map->BasicEditableGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 168, :column 2, :end-line 168, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__649689]))}, :name loom.graph/map->BasicEditableGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 20, :method-params ([G__649689]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 167, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649689]))}, remove-edges* {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 38, :column 4, :end-line 38, :end-column 17, :protocol loom.graph/EditableGraph, :doc "Removes edges from graph g. See remove-edges", :arglists (quote ([g edges]))}, :protocol loom.graph/EditableGraph, :name loom.graph/remove-edges*, :variadic false, :file "public/js/loom/graph.cljc", :end-column 17, :method-params ([g edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g edges])), :doc "Removes edges from graph g. See remove-edges"}, out-degree {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 21, :column 4, :end-line 21, :end-column 14, :protocol loom.graph/Graph, :doc "Returns the number of outgoing edges of node", :arglists (quote ([g node]))}, :protocol loom.graph/Graph, :name loom.graph/out-degree, :variadic false, :file "public/js/loom/graph.cljc", :end-column 14, :method-params ([g node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g node])), :doc "Returns the number of outgoing edges of node"}, add-nodes* {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 35, :column 4, :end-line 35, :end-column 14, :protocol loom.graph/EditableGraph, :doc "Add nodes to graph g. See add-nodes", :arglists (quote ([g nodes]))}, :protocol loom.graph/EditableGraph, :name loom.graph/add-nodes*, :variadic false, :file "public/js/loom/graph.cljc", :end-column 14, :method-params ([g nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g nodes])), :doc "Add nodes to graph g. See add-nodes"}, default-flygraph-graph-impl {:name loom.graph/default-flygraph-graph-impl, :file "public/js/loom/graph.cljc", :line 417, :column 1, :end-line 417, :end-column 50, :private true, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 417, :column 23, :end-line 417, :end-column 50, :private true}}, successors {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 19, :column 4, :end-line 19, :end-column 14, :protocol loom.graph/Graph, :doc "Returns direct successors of node, or (partial successors g)", :arglists (quote ([g] [g node])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}}, :protocol loom.graph/Graph, :name loom.graph/successors, :variadic false, :file "public/js/loom/graph.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}, :method-params ([g] [g node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g node]), :doc "Returns direct successors of node, or (partial successors g)"}, ->FlyDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 476, :column 2, :end-line 476, :end-column 12, :internal-ctor true, :factory :positional, :arglists (quote ([fnodes fedges fsuccessors fpredecessors start]))}, :name loom.graph/->FlyDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 12, :method-params ([fnodes fedges fsuccessors fpredecessors start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 475, :end-line 476, :max-fixed-arity 5, :fn-var true, :arglists (quote ([fnodes fedges fsuccessors fpredecessors start]))}, add-edges* {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 36, :column 4, :end-line 36, :end-column 14, :protocol loom.graph/EditableGraph, :doc "Add edges to graph g. See add-edges", :arglists (quote ([g edges]))}, :protocol loom.graph/EditableGraph, :name loom.graph/add-edges*, :variadic false, :file "public/js/loom/graph.cljc", :end-column 14, :method-params ([g edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g edges])), :doc "Add edges to graph g. See add-edges"}, ->BasicEditableWeightedGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 277, :column 2, :end-line 277, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([nodeset adj]))}, :name loom.graph/->BasicEditableWeightedGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 28, :method-params ([nodeset adj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 276, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodeset adj]))}, BasicEditableWeightedDigraph {:num-fields 3, :protocols #{cljs.core/IRecord loom.graph/EditableGraph cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable loom.graph/Digraph cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative loom.graph/WeightedGraph cljs.core/IMap cljs.core/ILookup}, :name loom.graph/BasicEditableWeightedDigraph, :file "public/js/loom/graph.cljc", :end-column 30, :type true, :column 2, :internal-ctor true, :line 333, :record true, :end-line 333, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, has-edge? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 18, :column 4, :end-line 18, :end-column 13, :protocol loom.graph/Graph, :doc "Returns true when edge [n1 n2] is in g", :arglists (quote ([g n1 n2]))}, :protocol loom.graph/Graph, :name loom.graph/has-edge?, :variadic false, :file "public/js/loom/graph.cljc", :end-column 13, :method-params ([g n1 n2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g n1 n2])), :doc "Returns true when edge [n1 n2] is in g"}, ->FlyGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 453, :column 2, :end-line 453, :end-column 10, :internal-ctor true, :factory :positional, :arglists (quote ([fnodes fedges fsuccessors start]))}, :name loom.graph/->FlyGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 10, :method-params ([fnodes fedges fsuccessors start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 452, :end-line 453, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fnodes fedges fsuccessors start]))}, remove-edges {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 81, :column 7, :end-line 81, :end-column 19, :arglists (quote ([g & edges])), :doc "Removes edges from graph g. Do not include weights", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g edges)], :arglists ([g & edges]), :arglists-meta (nil)}}, :name loom.graph/remove-edges, :variadic true, :file "public/js/loom/graph.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g edges)], :arglists ([g & edges]), :arglists-meta (nil)}, :method-params [(g edges)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists ([g & edges]), :doc "Removes edges from graph g. Do not include weights"}, Edge {:meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 41, :column 14, :end-line 41, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {src [[edge]], dest [[edge]]}}}, :protocol-symbol true, :name loom.graph/Edge, :file "public/js/loom/graph.cljc", :end-column 18, :column 1, :line 41, :protocol-info {:methods {src [[edge]], dest [[edge]]}}, :info nil, :end-line 41, :impls #{cljs/core.PersistentHashMap cljs/core.PersistentArrayMap cljs/core.PersistentVector}, :doc nil, :jsdoc ("@interface")}, graph? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 579, :column 7, :end-line 579, :end-column 13, :arglists (quote ([g])), :doc "Returns true if g satisfies the Graph protocol"}, :name loom.graph/graph?, :variadic false, :file "public/js/loom/graph.cljc", :end-column 13, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 579, :end-line 579, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns true if g satisfies the Graph protocol"}, BasicEditableWeightedGraph {:num-fields 2, :protocols #{cljs.core/IRecord loom.graph/EditableGraph cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative loom.graph/WeightedGraph cljs.core/IMap cljs.core/ILookup}, :name loom.graph/BasicEditableWeightedGraph, :file "public/js/loom/graph.cljc", :end-column 28, :type true, :column 2, :internal-ctor true, :line 277, :record true, :end-line 277, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, EditableGraph {:meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 34, :column 14, :end-line 34, :end-column 27, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {add-nodes* [[g nodes]], add-edges* [[g edges]], remove-nodes* [[g nodes]], remove-edges* [[g edges]], remove-all [[g]]}}}, :protocol-symbol true, :name loom.graph/EditableGraph, :file "public/js/loom/graph.cljc", :end-column 27, :column 1, :line 34, :protocol-info {:methods {add-nodes* [[g nodes]], add-edges* [[g edges]], remove-nodes* [[g nodes]], remove-edges* [[g edges]], remove-all [[g]]}}, :info nil, :end-line 34, :impls #{loom.graph/BasicEditableWeightedDigraph loom.graph/BasicEditableWeightedGraph loom.graph/BasicEditableGraph loom.graph/BasicEditableDigraph}, :doc nil, :jsdoc ("@interface")}, WeightedFlyGraph {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative loom.graph/WeightedGraph cljs.core/IMap cljs.core/ILookup}, :name loom.graph/WeightedFlyGraph, :file "public/js/loom/graph.cljc", :end-column 18, :type true, :column 2, :internal-ctor true, :line 502, :record true, :end-line 502, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, build-graph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 599, :column 7, :end-line 599, :end-column 18, :arglists (quote ([g & inits])), :doc "Builds up a graph (i.e. adds edges and nodes) from any combination of\n  other graphs, adjacency maps, edges, or nodes.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g inits)], :arglists ([g & inits]), :arglists-meta (nil)}}, :name loom.graph/build-graph, :variadic true, :file "public/js/loom/graph.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g inits)], :arglists ([g & inits]), :arglists-meta (nil)}, :method-params [(g inits)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 599, :end-line 599, :max-fixed-arity 1, :fn-var true, :arglists ([g & inits]), :doc "Builds up a graph (i.e. adds edges and nodes) from any combination of\n  other graphs, adjacency maps, edges, or nodes."}, transpose {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 29, :column 4, :end-line 29, :end-column 13, :protocol loom.graph/Digraph, :doc "Returns a graph with all edges reversed", :arglists (quote ([g]))}, :protocol loom.graph/Digraph, :name loom.graph/transpose, :variadic false, :file "public/js/loom/graph.cljc", :end-column 13, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns a graph with all edges reversed"}, remove-nodes* {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 37, :column 4, :end-line 37, :end-column 17, :protocol loom.graph/EditableGraph, :doc "Remove nodes from graph g. See remove-nodes", :arglists (quote ([g nodes]))}, :protocol loom.graph/EditableGraph, :name loom.graph/remove-nodes*, :variadic false, :file "public/js/loom/graph.cljc", :end-column 17, :method-params ([g nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g nodes])), :doc "Remove nodes from graph g. See remove-nodes"}, fly-graph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 660, :column 7, :end-line 660, :end-column 16, :arglists (quote ([& {:keys [nodes edges successors predecessors weight start]}])), :doc "Creates a read-only, ad-hoc graph which uses the provided functions\n  to return values for nodes, edges, etc. If any members are not functions,\n  they will be returned as-is. Edges can be inferred if nodes and\n  successors are provided. Nodes and edges can be inferred if successors and\n  start are provided.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [nodes edges successors predecessors weight start]})], :arglists ([& {:keys [nodes edges successors predecessors weight start]}]), :arglists-meta (nil)}}, :name loom.graph/fly-graph, :variadic true, :file "public/js/loom/graph.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [nodes edges successors predecessors weight start]})], :arglists ([& {:keys [nodes edges successors predecessors weight start]}]), :arglists-meta (nil)}, :method-params [({:keys [nodes edges successors predecessors weight start]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 660, :end-line 660, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [nodes edges successors predecessors weight start]}]), :doc "Creates a read-only, ad-hoc graph which uses the provided functions\n  to return values for nodes, edges, etc. If any members are not functions,\n  they will be returned as-is. Edges can be inferred if nodes and\n  successors are provided. Nodes and edges can be inferred if successors and\n  start are provided."}, default-flygraph-weighted-impl {:name loom.graph/default-flygraph-weighted-impl, :file "public/js/loom/graph.cljc", :line 443, :column 1, :end-line 443, :end-column 53, :private true, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 443, :column 23, :end-line 443, :end-column 53, :private true}}, editable? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 594, :column 7, :end-line 594, :end-column 16, :arglists (quote ([g])), :doc "Returns true if g satisfies the EditableGraph protocol"}, :name loom.graph/editable?, :variadic false, :file "public/js/loom/graph.cljc", :end-column 16, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 594, :end-line 594, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns true if g satisfies the EditableGraph protocol"}, remove-adj-nodes {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 150, :column 8, :end-line 150, :end-column 24, :private true, :arglists (quote ([m nodes adjacents remove-fn]))}, :private true, :name loom.graph/remove-adj-nodes, :variadic false, :file "public/js/loom/graph.cljc", :end-column 24, :method-params ([m nodes adjacents remove-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m nodes adjacents remove-fn]))}, predecessors {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 25, :column 4, :end-line 25, :end-column 16, :protocol loom.graph/Digraph, :doc "Returns direct predecessors of node, or (partial predecessors g)", :arglists (quote ([g] [g node])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}}, :protocol loom.graph/Digraph, :name loom.graph/predecessors, :variadic false, :file "public/js/loom/graph.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}, :method-params ([g] [g node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g node]), :doc "Returns direct predecessors of node, or (partial predecessors g)"}, add-cycle {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 574, :column 7, :end-line 574, :end-column 16, :arglists (quote ([g & nodes])), :doc "Adds a cycle of edges connecting the given nodes in order", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}}, :name loom.graph/add-cycle, :variadic true, :file "public/js/loom/graph.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}, :method-params [(g nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists ([g & nodes]), :doc "Adds a cycle of edges connecting the given nodes in order"}, weighted-digraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 654, :column 7, :end-line 654, :end-column 23, :arglists (quote ([& inits])), :doc "Creates an weighted, directed graph. inits can be edges, adjacency maps,\n  or graphs", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}}, :name loom.graph/weighted-digraph, :variadic true, :file "public/js/loom/graph.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}, :method-params [(inits)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 654, :end-line 654, :max-fixed-arity 0, :fn-var true, :arglists ([& inits]), :doc "Creates an weighted, directed graph. inits can be edges, adjacency maps,\n  or graphs"}, src {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 42, :column 4, :end-line 42, :end-column 7, :protocol loom.graph/Edge, :doc "Returns the source node of the edge", :arglists (quote ([edge]))}, :protocol loom.graph/Edge, :name loom.graph/src, :variadic false, :file "public/js/loom/graph.cljc", :end-column 7, :method-params ([edge]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edge])), :doc "Returns the source node of the edge"}, weighted-graph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 648, :column 7, :end-line 648, :end-column 21, :arglists (quote ([& inits])), :doc "Creates an weighted, undirected graph. inits can be edges, adjacency maps,\n  or graphs", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}}, :name loom.graph/weighted-graph, :variadic true, :file "public/js/loom/graph.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}, :method-params [(inits)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 648, :end-line 648, :max-fixed-arity 0, :fn-var true, :arglists ([& inits]), :doc "Creates an weighted, undirected graph. inits can be edges, adjacency maps,\n  or graphs"}, map->BasicEditableDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 217, :column 2, :end-line 217, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__649714]))}, :name loom.graph/map->BasicEditableDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 22, :method-params ([G__649714]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 216, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649714]))}, Digraph {:meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 24, :column 14, :end-line 24, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {predecessors [[g] [g node]], in-degree [[g node]], in-edges [[g] [g node]], transpose [[g]]}}}, :protocol-symbol true, :name loom.graph/Digraph, :file "public/js/loom/graph.cljc", :end-column 21, :column 1, :line 24, :protocol-info {:methods {predecessors [[g] [g node]], in-degree [[g node]], in-edges [[g] [g node]], transpose [[g]]}}, :info nil, :end-line 24, :impls #{loom.graph/BasicEditableWeightedDigraph loom.graph/WeightedFlyDigraph loom.graph/FlyDigraph loom.graph/BasicEditableDigraph}, :doc nil, :jsdoc ("@interface")}, *default-weight* {:name loom.graph/*default-weight*, :file "public/js/loom/graph.cljc", :line 86, :column 1, :end-line 88, :end-column 19, :dynamic true, :doc "Weight used when none is given for edges in weighted graphs", :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 88, :column 3, :end-line 88, :end-column 19, :dynamic true, :doc "Weight used when none is given for edges in weighted graphs"}}, map->WeightedFlyGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 502, :column 2, :end-line 502, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__649850]))}, :name loom.graph/map->WeightedFlyGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 18, :method-params ([G__649850]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 501, :end-line 502, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649850]))}, add-path {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 569, :column 7, :end-line 569, :end-column 15, :arglists (quote ([g & nodes])), :doc "Adds a path of edges connecting the given nodes in order", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}}, :name loom.graph/add-path, :variadic true, :file "public/js/loom/graph.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g nodes)], :arglists ([g & nodes]), :arglists-meta (nil)}, :method-params [(g nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 569, :end-line 569, :max-fixed-arity 1, :fn-var true, :arglists ([g & nodes]), :doc "Adds a path of edges connecting the given nodes in order"}, in-degree {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 27, :column 4, :end-line 27, :end-column 13, :protocol loom.graph/Digraph, :doc "Returns the number of direct predecessors to node", :arglists (quote ([g node]))}, :protocol loom.graph/Digraph, :name loom.graph/in-degree, :variadic false, :file "public/js/loom/graph.cljc", :end-column 13, :method-params ([g node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g node])), :doc "Returns the number of direct predecessors to node"}, WeightedFlyDigraph {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable loom.graph/Digraph cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative loom.graph/WeightedGraph cljs.core/IMap cljs.core/ILookup}, :name loom.graph/WeightedFlyDigraph, :file "public/js/loom/graph.cljc", :end-column 20, :type true, :column 2, :internal-ctor true, :line 529, :record true, :end-line 529, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->WeightedFlyDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 529, :column 2, :end-line 529, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__649871]))}, :name loom.graph/map->WeightedFlyDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 20, :method-params ([G__649871]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 528, :end-line 529, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649871]))}, default-flygraph-digraph-impl {:name loom.graph/default-flygraph-digraph-impl, :file "public/js/loom/graph.cljc", :line 438, :column 1, :end-line 438, :end-column 52, :private true, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 438, :column 23, :end-line 438, :end-column 52, :private true}}, WeightedGraph {:meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 31, :column 14, :end-line 31, :end-column 27, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {weight [[g] [g e] [g n1 n2]]}}}, :protocol-symbol true, :name loom.graph/WeightedGraph, :file "public/js/loom/graph.cljc", :end-column 27, :column 1, :line 31, :protocol-info {:methods {weight [[g] [g e] [g n1 n2]]}}, :info nil, :end-line 31, :impls #{loom.graph/BasicEditableWeightedDigraph loom.graph/BasicEditableWeightedGraph loom.graph/WeightedFlyGraph loom.graph/WeightedFlyDigraph}, :doc nil, :jsdoc ("@interface")}, FlyGraph {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name loom.graph/FlyGraph, :file "public/js/loom/graph.cljc", :end-column 10, :type true, :column 2, :internal-ctor true, :line 453, :record true, :end-line 453, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->WeightedFlyGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 502, :column 2, :end-line 502, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([fnodes fedges fsuccessors fweight start]))}, :name loom.graph/->WeightedFlyGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 18, :method-params ([fnodes fedges fsuccessors fweight start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 501, :end-line 502, :max-fixed-arity 5, :fn-var true, :arglists (quote ([fnodes fedges fsuccessors fweight start]))}, weight {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 32, :column 4, :end-line 32, :end-column 10, :protocol loom.graph/WeightedGraph, :doc "Returns the weight of edge e or edge [n1 n2] or (partial weight g)", :arglists (quote ([g] [g e] [g n1 n2])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g e] [g n1 n2]), :arglists ([g] [g e] [g n1 n2]), :arglists-meta (nil nil nil)}}, :protocol loom.graph/WeightedGraph, :name loom.graph/weight, :variadic false, :file "public/js/loom/graph.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g e] [g n1 n2]), :arglists ([g] [g e] [g n1 n2]), :arglists-meta (nil nil nil)}, :method-params ([g] [g e] [g n1 n2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 31, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists ([g] [g e] [g n1 n2]), :doc "Returns the weight of edge e or edge [n1 n2] or (partial weight g)"}, nodes {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 15, :column 4, :end-line 15, :end-column 9, :protocol loom.graph/Graph, :doc "Returns a collection of the nodes in graph g", :arglists (quote ([g]))}, :protocol loom.graph/Graph, :name loom.graph/nodes, :variadic false, :file "public/js/loom/graph.cljc", :end-column 9, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns a collection of the nodes in graph g"}, map->FlyGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 453, :column 2, :end-line 453, :end-column 10, :internal-ctor true, :factory :map, :arglists (quote ([G__649808]))}, :name loom.graph/map->FlyGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 10, :method-params ([G__649808]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 452, :end-line 453, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649808]))}, BasicEditableGraph {:num-fields 2, :protocols #{cljs.core/IRecord loom.graph/EditableGraph cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name loom.graph/BasicEditableGraph, :file "public/js/loom/graph.cljc", :end-column 20, :type true, :column 2, :internal-ctor true, :line 168, :record true, :end-line 168, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->BasicEditableWeightedDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 333, :column 2, :end-line 333, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([nodeset adj in]))}, :name loom.graph/->BasicEditableWeightedDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 30, :method-params ([nodeset adj in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 332, :end-line 333, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nodeset adj in]))}, out-edges {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 22, :column 4, :end-line 22, :end-column 13, :protocol loom.graph/Graph, :doc "Returns all the outgoing edges of node", :arglists (quote ([g] [g node])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}}, :protocol loom.graph/Graph, :name loom.graph/out-edges, :variadic false, :file "public/js/loom/graph.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}, :method-params ([g] [g node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g node]), :doc "Returns all the outgoing edges of node"}, BasicEditableDigraph {:num-fields 3, :protocols #{cljs.core/IRecord loom.graph/EditableGraph cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection loom.graph/Graph cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable loom.graph/Digraph cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name loom.graph/BasicEditableDigraph, :file "public/js/loom/graph.cljc", :end-column 22, :type true, :column 2, :internal-ctor true, :line 217, :record true, :end-line 217, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->FlyDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 476, :column 2, :end-line 476, :end-column 12, :internal-ctor true, :factory :map, :arglists (quote ([G__649829]))}, :name loom.graph/map->FlyDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 12, :method-params ([G__649829]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 475, :end-line 476, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649829]))}, graph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 636, :column 7, :end-line 636, :end-column 12, :arglists (quote ([& inits])), :doc "Creates an unweighted, undirected graph. inits can be edges, adjacency maps,\n  or graphs", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}}, :name loom.graph/graph, :variadic true, :file "public/js/loom/graph.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}, :method-params [(inits)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 636, :end-line 636, :max-fixed-arity 0, :fn-var true, :arglists ([& inits]), :doc "Creates an unweighted, undirected graph. inits can be edges, adjacency maps,\n  or graphs"}, ->BasicEditableDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 217, :column 2, :end-line 217, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([nodeset adj in]))}, :name loom.graph/->BasicEditableDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 22, :method-params ([nodeset adj in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 216, :end-line 217, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nodeset adj in]))}, digraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 642, :column 7, :end-line 642, :end-column 14, :arglists (quote ([& inits])), :doc "Creates an unweighted, directed graph. inits can be edges, adjacency maps,\n  or graphs", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}}, :name loom.graph/digraph, :variadic true, :file "public/js/loom/graph.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(inits)], :arglists ([& inits]), :arglists-meta (nil)}, :method-params [(inits)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 642, :end-line 642, :max-fixed-arity 0, :fn-var true, :arglists ([& inits]), :doc "Creates an unweighted, directed graph. inits can be edges, adjacency maps,\n  or graphs"}, ->WeightedFlyDigraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 529, :column 2, :end-line 529, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([fnodes fedges fsuccessors fpredecessors fweight start]))}, :name loom.graph/->WeightedFlyDigraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 20, :method-params ([fnodes fedges fsuccessors fpredecessors fweight start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 528, :end-line 529, :max-fixed-arity 6, :fn-var true, :arglists (quote ([fnodes fedges fsuccessors fpredecessors fweight start]))}, subgraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 564, :column 7, :end-line 564, :end-column 15, :arglists (quote ([g ns])), :doc "Returns a graph with only the given nodes"}, :name loom.graph/subgraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 15, :method-params ([g ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 564, :end-line 564, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g ns])), :doc "Returns a graph with only the given nodes"}, call-or-return {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 411, :column 8, :end-line 411, :end-column 22, :private true, :arglists (quote ([f & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :private true, :name loom.graph/call-or-return, :variadic true, :file "public/js/loom/graph.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists ([f & args])}, in-edges {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 28, :column 4, :end-line 28, :end-column 12, :protocol loom.graph/Digraph, :doc "Returns all the incoming edges of node", :arglists (quote ([g] [g node])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}}, :protocol loom.graph/Digraph, :name loom.graph/in-edges, :variadic false, :file "public/js/loom/graph.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g node]), :arglists ([g] [g node]), :arglists-meta (nil nil)}, :method-params ([g] [g node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g node]), :doc "Returns all the incoming edges of node"}, default-graph-impls {:name loom.graph/default-graph-impls, :file "public/js/loom/graph.cljc", :line 90, :column 1, :end-line 90, :end-column 25, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 90, :column 6, :end-line 90, :end-column 25}}, remove-all {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 39, :column 4, :end-line 39, :end-column 14, :protocol loom.graph/EditableGraph, :doc "Removes all nodes and edges from graph g", :arglists (quote ([g]))}, :protocol loom.graph/EditableGraph, :name loom.graph/remove-all, :variadic false, :file "public/js/loom/graph.cljc", :end-column 14, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Removes all nodes and edges from graph g"}, map->BasicEditableWeightedGraph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/graph.cljc", :line 277, :column 2, :end-line 277, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__649744]))}, :name loom.graph/map->BasicEditableWeightedGraph, :variadic false, :file "public/js/loom/graph.cljc", :end-column 28, :method-params ([G__649744]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 276, :end-line 277, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__649744]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{reduce contains? :unweighted :out-degree :add-nodes* fpredecessors dest :successors :fedges n1 :has-edge? :else in :fsuccessors successors conj fedges -> :nodeset :start fn :fnodes :adj :src :fweight :predecessors :all fsuccessors if :in-degree or n assoc-in some fnodes nodeset start n2 adj :nodes update-in :weight not :weighted predecessors src :out-edges fweight e node :attrs :in-edges for partial g keys weight :fpredecessors :has-node? nodes out-edges :dest bf-traverse count nbr call-or-return :edges in-edges :in get-in}, :order [:src :dest :all :unweighted :weighted :nodes :edges :has-node? :has-edge? :out-degree :out-edges fn g :nodeset for n1 nodes e out-edges node contains? n2 get-in :adj count partial successors :add-nodes* :successors reduce n -> update-in conj assoc-in or keys :predecessors :in-degree :in-edges predecessors :in in-edges :weight weight src dest nodeset adj in if :fnodes not :start call-or-return bf-traverse :fedges nbr :fsuccessors some :fpredecessors :fweight fnodes fedges fsuccessors start fpredecessors fweight :attrs :else]}, :doc "Defines protocols for graphs, digraphs, and weighted graphs.\nAlso provides record implementations and constructors for simple graphs --\nweighted, unweighted, directed, and undirected. The implementations are based\non adjacency lists."}