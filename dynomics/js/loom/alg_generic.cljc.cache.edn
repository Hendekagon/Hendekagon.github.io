;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{ancestors}, :name loom.alg-generic, :imports nil, :requires nil, :uses nil, :defs {pre-span {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 92, :column 7, :end-line 92, :end-column 15, :arglists (quote ([successors start & {:keys [seen return-seen], :or {seen #{}}}])), :doc "Returns a depth-first spanning tree of the form {node [successors]}", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :arglists-meta (nil)}}, :name loom.alg-generic/pre-span, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :arglists-meta (nil)}, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :doc "Returns a depth-first spanning tree of the form {node [successors]}"}, ancestry-new {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 530, :column 7, :end-line 530, :end-column 19, :arglists (quote ([])), :doc "Create a new, empty Ancestry cache."}, :name loom.alg-generic/ancestry-new, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 530, :end-line 530, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Create a new, empty Ancestry cache."}, trace-paths {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 28, :column 7, :end-line 28, :end-column 18, :arglists (quote ([preds start])), :doc "Given a function and a starting node, returns all possible paths\n  back to source. Cycles are not accounted for."}, :name loom.alg-generic/trace-paths, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 18, :method-params ([preds start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([preds start])), :doc "Given a function and a starting node, returns all possible paths\n  back to source. Cycles are not accounted for."}, bm-set {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 473, :column 7, :end-line 473, :end-column 13, :arglists (quote ([bitmap idx])), :doc "Set boolean state of bit in 'bitmap at 'idx to true."}, :name loom.alg-generic/bm-set, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 13, :method-params ([bitmap idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bitmap idx])), :doc "Set boolean state of bit in 'bitmap at 'idx to true."}, ancestry-nodes {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 579, :column 7, :end-line 579, :end-column 21, :arglists (quote ([ancestry])), :doc "Returns all of the nodes in an 'ancestry."}, :name loom.alg-generic/ancestry-nodes, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 21, :method-params ([ancestry]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 579, :end-line 579, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ancestry])), :doc "Returns all of the nodes in an 'ancestry."}, dijkstra-path-dist {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 397, :column 7, :end-line 397, :end-column 25, :arglists (quote ([successors dist start end])), :doc "Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a vector: [path distance]"}, :name loom.alg-generic/dijkstra-path-dist, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 25, :method-params ([successors dist start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 397, :end-line 397, :max-fixed-arity 4, :fn-var true, :arglists (quote ([successors dist start end])), :doc "Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a vector: [path distance]"}, bm-get {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 488, :column 7, :end-line 488, :end-column 13, :arglists (quote ([bitmap idx])), :doc "Get boolean state of bit in 'bitmap at 'idx."}, :name loom.alg-generic/bm-get, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 13, :method-params ([bitmap idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bitmap idx])), :doc "Get boolean state of bit in 'bitmap at 'idx."}, trace-path {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 11, :column 7, :end-line 11, :end-column 17, :arglists (quote ([preds node])), :doc "Using a map of nodes-to-preds, traces a node's family tree back to the\n  source. Cycles are not accounted for."}, :name loom.alg-generic/trace-path, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 17, :method-params ([preds node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([preds node])), :doc "Using a map of nodes-to-preds, traces a node's family tree back to the\n  source. Cycles are not accounted for."}, preds->span {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 34, :column 7, :end-line 34, :end-column 18, :arglists (quote ([preds])), :doc "Converts a map of the form {node predecessor} to a spanning tree of the\n  form {node [successors]}"}, :name loom.alg-generic/preds->span, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 18, :method-params ([preds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([preds])), :doc "Converts a map of the form {node predecessor} to a spanning tree of the\n  form {node [successors]}"}, post-edge-traverse {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 128, :column 7, :end-line 128, :end-column 25, :arglists (quote ([successors start & {:keys [seen return-seen], :or {seen #{}}}])), :doc "Traverses a graph depth-first postorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :arglists-meta (nil)}}, :name loom.alg-generic/post-edge-traverse, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :arglists-meta (nil)}, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :doc "Traverses a graph depth-first postorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction."}, ->Ancestry {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 528, :column 12, :end-line 528, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([node->idx idx->node bitmaps]))}, :name loom.alg-generic/->Ancestry, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 20, :method-params ([node->idx idx->node bitmaps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 528, :end-line 528, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node->idx idx->node bitmaps]))}, bf-path {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 218, :column 7, :end-line 218, :end-column 14, :arglists (quote ([successors start end & {:as opts}])), :doc "Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights), successors being a function that returns adjacent nodes", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(successors start end {:as opts})], :arglists ([successors start end & {:as opts}]), :arglists-meta (nil)}}, :name loom.alg-generic/bf-path, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(successors start end {:as opts})], :arglists ([successors start end & {:as opts}]), :arglists-meta (nil)}, :method-params [(successors start end {:as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 3, :fn-var true, :arglists ([successors start end & {:as opts}]), :doc "Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights), successors being a function that returns adjacent nodes"}, bf-path-bi {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 235, :column 7, :end-line 235, :end-column 17, :arglists (quote ([outgoing predecessors start end])), :doc "Using a bidirectional breadth-first search, finds a path from start\n  to end with the fewest hops (i.e. irrespective of edge weights),\n  outgoing and predecessors being functions which return adjacent\n  nodes. Can be much faster than a unidirectional search on certain\n  types of graphs"}, :name loom.alg-generic/bf-path-bi, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 17, :method-params ([outgoing predecessors start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 4, :fn-var true, :arglists (quote ([outgoing predecessors start end])), :doc "Using a bidirectional breadth-first search, finds a path from start\n  to end with the fewest hops (i.e. irrespective of edge weights),\n  outgoing and predecessors being functions which return adjacent\n  nodes. Can be much faster than a unidirectional search on certain\n  types of graphs"}, dijkstra-traverse {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 350, :column 7, :end-line 350, :end-column 24, :arglists (quote ([successors dist start] [successors dist start f])), :doc "Returns a lazy-seq of [current-node state] where state is a map in the\n  format {node [distance predecessor]}. When f is provided, returns\n  a lazy-seq of (f node state) for each node", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([successors dist start] [successors dist start f]), :arglists ([successors dist start] [successors dist start f]), :arglists-meta (nil nil)}}, :name loom.alg-generic/dijkstra-traverse, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([successors dist start] [successors dist start f]), :arglists ([successors dist start] [successors dist start f]), :arglists-meta (nil nil)}, :method-params ([successors dist start] [successors dist start f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 4, :fn-var true, :arglists ([successors dist start] [successors dist start f]), :doc "Returns a lazy-seq of [current-node state] where state is a map in the\n  format {node [distance predecessor]}. When f is provided, returns\n  a lazy-seq of (f node state) for each node"}, Ancestry {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name loom.alg-generic/Ancestry, :file "public/js/loom/alg_generic.cljc", :end-column 20, :type true, :column 12, :internal-ctor true, :line 528, :record true, :end-line 528, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, bm-longs {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 463, :column 13, :end-line 463, :end-column 21, :tag Long, :arglists (quote ([bits])), :doc "Returns the number of longs required to store bits count bits in a bitmap."}, :name loom.alg-generic/bm-longs, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 21, :method-params ([bits]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :ret-tag Long, :end-line 463, :max-fixed-arity 1, :tag Long, :fn-var true, :arglists (quote ([bits])), :doc "Returns the number of longs required to store bits count bits in a bitmap."}, pre-edge-traverse {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 66, :column 7, :end-line 66, :end-column 24, :arglists (quote ([successors start & {:keys [seen], :or {seen #{}}}])), :doc "Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen], :or {seen #{}}}]), :arglists-meta (nil)}}, :name loom.alg-generic/pre-edge-traverse, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen], :or {seen #{}}}]), :arglists-meta (nil)}, :method-params [(successors start {:keys [seen], :or {seen #{}}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists ([successors start & {:keys [seen], :or {seen #{}}}]), :doc "Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction."}, paths {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([preds path])), :doc "Returns a lazy seq of all non-looping path vectors starting with\n  [<start-node>]"}, :name loom.alg-generic/paths, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 12, :method-params ([preds path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([preds path])), :doc "Returns a lazy seq of all non-looping path vectors starting with\n  [<start-node>]"}, bm-new {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 468, :column 7, :end-line 468, :end-column 13, :arglists (quote ([])), :doc "Create new empty bitmap."}, :name loom.alg-generic/bm-new, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 468, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Create new empty bitmap."}, bf-paths-bi {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 284, :column 7, :end-line 284, :end-column 18, :arglists (quote ([successors predecessors start end])), :doc "Using a bidirectional breadth-first search, returns all shortest\n  paths from start to end; predecessors is called on end and each\n  preceding node, successors is called on start, etc."}, :name loom.alg-generic/bf-paths-bi, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 18, :method-params ([successors predecessors start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 4, :fn-var true, :arglists (quote ([successors predecessors start end])), :doc "Using a bidirectional breadth-first search, returns all shortest\n  paths from start to end; predecessors is called on end and each\n  preceding node, successors is called on start, etc."}, dijkstra-span {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 384, :column 7, :end-line 384, :end-column 20, :arglists (quote ([successors dist start])), :doc "Finds all shortest distances from start, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a map in the format {node {successor distance}}"}, :name loom.alg-generic/dijkstra-span, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 20, :method-params ([successors dist start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 3, :fn-var true, :arglists (quote ([successors dist start])), :doc "Finds all shortest distances from start, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a map in the format {node {successor distance}}"}, ancestors {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 570, :column 7, :end-line 570, :end-column 16, :arglists (quote ([ancestry child])), :doc "Returns all of the ancestors of 'child node."}, :name loom.alg-generic/ancestors, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 16, :method-params ([ancestry child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 570, :end-line 570, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ancestry child])), :doc "Returns all of the ancestors of 'child node."}, map->Ancestry {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 528, :column 12, :end-line 528, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__41499]))}, :name loom.alg-generic/map->Ancestry, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 20, :method-params ([G__41499]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 528, :end-line 528, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__41499]))}, reverse-edges {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 272, :column 8, :end-line 272, :end-column 21, :private true, :arglists (quote ([successor-fn nodes coll]))}, :private true, :name loom.alg-generic/reverse-edges, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 21, :method-params ([successor-fn nodes coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 3, :fn-var true, :arglists (quote ([successor-fn nodes coll]))}, bits-per-long {:name loom.alg-generic/bits-per-long, :file "public/js/loom/alg_generic.cljc", :line 461, :column 1, :end-line 461, :end-column 25, :tag Long, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 461, :column 12, :end-line 461, :end-column 25, :tag Long}}, bm-or {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 499, :column 7, :end-line 499, :end-column 12, :arglists (quote ([& bitmaps])), :doc "Logically OR 'bitmaps together.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(bitmaps)], :arglists ([& bitmaps]), :arglists-meta (nil)}}, :name loom.alg-generic/bm-or, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(bitmaps)], :arglists ([& bitmaps]), :arglists-meta (nil)}, :method-params [(bitmaps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 499, :end-line 499, :max-fixed-arity 0, :fn-var true, :arglists ([& bitmaps]), :doc "Logically OR 'bitmaps together."}, conj-paths {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 278, :column 8, :end-line 278, :end-column 18, :private true, :arglists (quote ([from-map to-map matches]))}, :private true, :name loom.alg-generic/conj-paths, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 18, :method-params ([from-map to-map matches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 3, :fn-var true, :arglists (quote ([from-map to-map matches]))}, bm-get-indicies {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 517, :column 7, :end-line 517, :end-column 22, :arglists (quote ([bitmap])), :doc "Get the indicies of set bits in 'bitmap."}, :name loom.alg-generic/bm-get-indicies, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 22, :method-params ([bitmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 517, :end-line 517, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bitmap])), :doc "Get the indicies of set bits in 'bitmap."}, pre-traverse {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 49, :column 7, :end-line 49, :end-column 19, :arglists (quote ([successors start & {:keys [seen], :or {seen #{}}}])), :doc "Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of nodes.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen], :or {seen #{}}}]), :arglists-meta (nil)}}, :name loom.alg-generic/pre-traverse, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen], :or {seen #{}}}]), :arglists-meta (nil)}, :method-params [(successors start {:keys [seen], :or {seen #{}}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists ([successors start & {:keys [seen], :or {seen #{}}}]), :doc "Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of nodes."}, bf-span {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 208, :column 7, :end-line 208, :end-column 14, :arglists (quote ([successors start & {:keys [seen]}])), :doc "Return a breadth-first spanning tree of the form {node\n  [successors]}", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen]})], :arglists ([successors start & {:keys [seen]}]), :arglists-meta (nil)}}, :name loom.alg-generic/bf-span, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen]})], :arglists ([successors start & {:keys [seen]}]), :arglists-meta (nil)}, :method-params [(successors start {:keys [seen]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists ([successors start & {:keys [seen]}]), :doc "Return a breadth-first spanning tree of the form {node\n  [successors]}"}, topsort-component {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 158, :column 7, :end-line 158, :end-column 24, :arglists (quote ([successors start] [successors start seen explored])), :doc "Topological sort of a component of a (presumably) directed graph.\n  Returns nil if the graph contains any cycles. See loom.alg/topsort\n  for a complete topological sort", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([successors start] [successors start seen explored]), :arglists ([successors start] [successors start seen explored]), :arglists-meta (nil nil)}}, :name loom.alg-generic/topsort-component, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([successors start] [successors start seen explored]), :arglists ([successors start] [successors start seen explored]), :arglists-meta (nil nil)}, :method-params ([successors start] [successors start seen explored]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 4, :fn-var true, :arglists ([successors start] [successors start seen explored]), :doc "Topological sort of a component of a (presumably) directed graph.\n  Returns nil if the graph contains any cycles. See loom.alg/topsort\n  for a complete topological sort"}, bf-traverse {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 183, :column 7, :end-line 183, :end-column 18, :arglists (quote ([successors start & {:keys [f when seen]}])), :doc "Traverses a graph breadth-first from start, successors being a\n  function that returns adjacent nodes. When :f is provided, returns a\n  lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When :when is provided,\n  filters successors with (f neighbor predecessor depth).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [f when seen]})], :arglists ([successors start & {:keys [f when seen]}]), :arglists-meta (nil)}}, :name loom.alg-generic/bf-traverse, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [f when seen]})], :arglists ([successors start & {:keys [f when seen]}]), :arglists-meta (nil)}, :method-params [(successors start {:keys [f when seen]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 2, :fn-var true, :arglists ([successors start & {:keys [f when seen]}]), :doc "Traverses a graph breadth-first from start, successors being a\n  function that returns adjacent nodes. When :f is provided, returns a\n  lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When :when is provided,\n  filters successors with (f neighbor predecessor depth)."}, ancestor? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 558, :column 7, :end-line 558, :end-column 16, :arglists (quote ([ancestry childer parenter])), :doc "Finds if the 'parenter node is an ancestor of 'childer node for the given\n  'ancestry cache."}, :name loom.alg-generic/ancestor?, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 16, :method-params ([ancestry childer parenter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 558, :end-line 558, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ancestry childer parenter])), :doc "Finds if the 'parenter node is an ancestor of 'childer node for the given\n  'ancestry cache."}, post-traverse {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 109, :column 7, :end-line 109, :end-column 20, :arglists (quote ([successors start & {:keys [seen return-seen], :or {seen #{}}}])), :doc "Traverses a graph depth-first postorder from start, successors\n  being a function that returns adjacent nodes. Returns a vector", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :arglists-meta (nil)}}, :name loom.alg-generic/post-traverse, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :arglists-meta (nil)}, :method-params [(successors start {:keys [seen return-seen], :or {seen #{}}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists ([successors start & {:keys [seen return-seen], :or {seen #{}}}]), :doc "Traverses a graph depth-first postorder from start, successors\n  being a function that returns adjacent nodes. Returns a vector"}, ancestry-contains? {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 535, :column 7, :end-line 535, :end-column 25, :arglists (quote ([ancestry node])), :doc "Finds if a 'node is contained in the 'ancestry cache."}, :name loom.alg-generic/ancestry-contains?, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 25, :method-params ([ancestry node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ancestry node])), :doc "Finds if a 'node is contained in the 'ancestry cache."}, ancestry-add {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 540, :column 7, :end-line 540, :end-column 19, :arglists (quote ([ancestry node & parents])), :doc "Adds a 'node and its 'parents associations to the 'ancestry cache.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ancestry node parents)], :arglists ([ancestry node & parents]), :arglists-meta (nil)}}, :name loom.alg-generic/ancestry-add, :variadic true, :file "public/js/loom/alg_generic.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ancestry node parents)], :arglists ([ancestry node & parents]), :arglists-meta (nil)}, :method-params [(ancestry node parents)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 540, :end-line 540, :max-fixed-arity 2, :fn-var true, :arglists ([ancestry node & parents]), :doc "Adds a 'node and its 'parents associations to the 'ancestry cache."}, shared-keys {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 228, :column 8, :end-line 228, :end-column 19, :private true, :arglists (quote ([m1 m2])), :doc "Returns a lazy-seq of the keys that exist in both m1 and m2"}, :private true, :name loom.alg-generic/shared-keys, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 19, :method-params ([m1 m2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m1 m2])), :doc "Returns a lazy-seq of the keys that exist in both m1 and m2"}, dijkstra-path {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/loom/alg_generic.cljc", :line 408, :column 7, :end-line 408, :end-column 20, :arglists (quote ([successors dist start end])), :doc "Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2)"}, :name loom.alg-generic/dijkstra-path, :variadic false, :file "public/js/loom/alg_generic.cljc", :end-column 20, :method-params ([successors dist start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 408, :end-line 408, :max-fixed-arity 4, :fn-var true, :arglists (quote ([successors dist start end])), :doc "Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2)"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{bitmaps :when :idx->node :node->idx idx->node node->idx :seen :return-seen :f :bitmaps}, :order [:seen :return-seen :f :when :node->idx :idx->node :bitmaps node->idx idx->node bitmaps]}, :doc "Graph algorithms for use on any type of graph"}