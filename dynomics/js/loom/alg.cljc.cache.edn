;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name loom.alg, :imports nil, :requires {loom.alg-generic loom.alg-generic, loom.graph loom.graph, clj.set clojure.set, gen loom.alg-generic, flow loom.flow, tailrecursion.priority-map tailrecursion.priority-map, clojure.set clojure.set, loom.flow loom.flow, pm tailrecursion.priority-map, graph loom.graph}, :uses {directed? loom.graph, weighted? loom.graph, edges loom.graph, add-nodes loom.graph, add-edges loom.graph, out-degree loom.graph, trace-path loom.alg-generic, preds->span loom.alg-generic, successors loom.graph, transpose loom.graph, predecessors loom.graph, in-degree loom.graph, weight loom.graph, nodes loom.graph, graph loom.graph}, :defs {relax-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 189, :column 8, :end-line 189, :end-column 19, :private true, :arglists (quote ([g start estimates])), :doc "Performs edge relaxation on all edges in weighted directed graph"}, :private true, :name loom.alg/relax-edges, :variadic false, :file "public/js/loom/alg.cljc", :end-column 19, :method-params ([g start estimates]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g start estimates])), :doc "Performs edge relaxation on all edges in weighted directed graph"}, degeneracy-ordering {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 663, :column 7, :end-line 663, :end-column 26, :arglists (quote ([g])), :doc "Returns sequence of vertices in degeneracy order."}, :name loom.alg/degeneracy-ordering, :variadic false, :file "public/js/loom/alg.cljc", :end-column 26, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 663, :end-line 663, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns sequence of vertices in degeneracy order."}, pre-span {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 41, :column 7, :end-line 41, :end-column 15, :arglists (quote ([g] [g start])), :doc "Returns a depth-first spanning tree of the form {node [successors]}", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}}, :name loom.alg/pre-span, :variadic false, :file "public/js/loom/alg.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}, :method-params ([g] [g start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g start]), :doc "Returns a depth-first spanning tree of the form {node [successors]}"}, bf-all-pairs-shortest-paths {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 324, :column 7, :end-line 324, :end-column 34, :arglists (quote ([g])), :doc "Uses bf-span on each node in the graph."}, :name loom.alg/bf-all-pairs-shortest-paths, :variadic false, :file "public/js/loom/alg.cljc", :end-column 34, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Uses bf-span on each node in the graph."}, density {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 393, :column 7, :end-line 393, :end-column 14, :arglists (quote ([g & {:keys [loops], :or {loops false}}])), :doc "Return the density of graph g", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g {:keys [loops], :or {loops false}})], :arglists ([g & {:keys [loops], :or {loops false}}]), :arglists-meta (nil)}}, :name loom.alg/density, :variadic true, :file "public/js/loom/alg.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(g {:keys [loops], :or {loops false}})], :arglists ([g & {:keys [loops], :or {loops false}}]), :arglists-meta (nil)}, :method-params [(g {:keys [loops], :or {loops false}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 393, :end-line 393, :max-fixed-arity 1, :fn-var true, :arglists ([g & {:keys [loops], :or {loops false}}]), :doc "Return the density of graph g"}, bellman-ford {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 217, :column 7, :end-line 217, :end-column 19, :arglists (quote ([g start])), :doc "Given a weighted, directed graph G = (V, E) with source start,\n   the Bellman-Ford algorithm produces map of single source shortest\n   paths and their costs if no negative-weight cycle that is reachable\n   from the source exists, and false otherwise, indicating that no\n   solution exists."}, :name loom.alg/bellman-ford, :variadic false, :file "public/js/loom/alg.cljc", :end-column 19, :method-params ([g start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g start])), :doc "Given a weighted, directed graph G = (V, E) with source start,\n   the Bellman-Ford algorithm produces map of single source shortest\n   paths and their costs if no negative-weight cycle that is reachable\n   from the source exists, and false otherwise, indicating that no\n   solution exists."}, astar-dist {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 650, :column 7, :end-line 650, :end-column 17, :arglists (quote ([g src target heur])), :doc "Returns the length of the shortest path between src and target using\n    the A* algorithm"}, :name loom.alg/astar-dist, :variadic false, :file "public/js/loom/alg.cljc", :end-column 17, :method-params ([g src target heur]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 4, :fn-var true, :arglists (quote ([g src target heur])), :doc "Returns the length of the shortest path between src and target using\n    the A* algorithm"}, distinct-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 410, :column 7, :end-line 410, :end-column 21, :arglists (quote ([g])), :doc "Returns the distinct edges of g. Only useful for undirected graphs"}, :name loom.alg/distinct-edges, :variadic false, :file "public/js/loom/alg.cljc", :end-column 21, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns the distinct edges of g. Only useful for undirected graphs"}, bk {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 704, :column 8, :end-line 704, :end-column 10, :private true, :arglists (quote ([g])), :doc "An iterative implementation of Bron-Kerbosch using degeneracy ordering\n  at the outer loop and max-degree vertex pivoting in the inner loop."}, :private true, :name loom.alg/bk, :variadic false, :file "public/js/loom/alg.cljc", :end-column 10, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 704, :end-line 704, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "An iterative implementation of Bron-Kerbosch using degeneracy ordering\n  at the outer loop and max-degree vertex pivoting in the inner loop."}, bipartite? {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 455, :column 7, :end-line 455, :end-column 17, :arglists (quote ([g])), :doc "Returns true if g is bipartite"}, :name loom.alg/bipartite?, :variadic false, :file "public/js/loom/alg.cljc", :end-column 17, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 455, :end-line 455, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns true if g is bipartite"}, greedy-coloring {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 496, :column 7, :end-line 496, :end-column 22, :arglists (quote ([g])), :doc "Greedily color the vertices of a graph using the first-fit heuristic.\n  Returns a map of nodes to colors (0, 1, ...)."}, :name loom.alg/greedy-coloring, :variadic false, :file "public/js/loom/alg.cljc", :end-column 22, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 496, :end-line 496, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Greedily color the vertices of a graph using the first-fit heuristic.\n  Returns a map of nodes to colors (0, 1, ...)."}, dijkstra-path-dist {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 158, :column 7, :end-line 158, :end-column 25, :arglists (quote ([g start end])), :doc "Finds the shortest path from start to end. Returns a vector:\n  [path distance]"}, :name loom.alg/dijkstra-path-dist, :variadic false, :file "public/js/loom/alg.cljc", :end-column 25, :method-params ([g start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g start end])), :doc "Finds the shortest path from start to end. Returns a vector:\n  [path distance]"}, scc {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 365, :column 7, :end-line 365, :end-column 10, :arglists (quote ([g])), :doc "Returns the strongly-connected components of directed graph g as a vector of\n  vectors. Uses Kosaraju's algorithm."}, :name loom.alg/scc, :variadic false, :file "public/js/loom/alg.cljc", :end-column 10, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns the strongly-connected components of directed graph g as a vector of\n  vectors. Uses Kosaraju's algorithm."}, bipartite-sets {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 460, :column 7, :end-line 460, :end-column 21, :arglists (quote ([g])), :doc "Returns two sets of nodes, one for each color of the bipartite coloring,\n  or nil if g is not bipartite"}, :name loom.alg/bipartite-sets, :variadic false, :file "public/js/loom/alg.cljc", :end-column 21, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns two sets of nodes, one for each color of the bipartite coloring,\n  or nil if g is not bipartite"}, loners {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 402, :column 7, :end-line 402, :end-column 13, :arglists (quote ([g])), :doc "Returns nodes with no connections to other nodes (i.e., isolated nodes)"}, :name loom.alg/loners, :variadic false, :file "public/js/loom/alg.cljc", :end-column 13, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 402, :end-line 402, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns nodes with no connections to other nodes (i.e., isolated nodes)"}, traverse-all {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 20, :column 8, :end-line 20, :end-column 20, :private true, :arglists (quote ([nodes traverse]))}, :private true, :name loom.alg/traverse-all, :variadic false, :file "public/js/loom/alg.cljc", :end-column 20, :method-params ([nodes traverse]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodes traverse]))}, longest-shortest-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 267, :column 7, :end-line 267, :end-column 28, :arglists (quote ([g start])), :doc "Finds the longest shortest path beginning at start, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."}, :name loom.alg/longest-shortest-path, :variadic false, :file "public/js/loom/alg.cljc", :end-column 28, :method-params ([g start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g start])), :doc "Finds the longest shortest path beginning at start, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."}, neighbor-colors {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 473, :column 8, :end-line 473, :end-column 23, :private true, :arglists (quote ([g node coloring])), :doc "Given a putative coloring of a graph, returns the colors of all the\n  neighbors of a given node."}, :private true, :name loom.alg/neighbor-colors, :variadic false, :file "public/js/loom/alg.cljc", :end-column 23, :method-params ([g node coloring]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g node coloring])), :doc "Given a putative coloring of a graph, returns the colors of all the\n  neighbors of a given node."}, dag? {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 254, :column 7, :end-line 254, :end-column 11, :arglists (quote ([g])), :doc "Returns true if g is a directed acyclic graph"}, :name loom.alg/dag?, :variadic false, :file "public/js/loom/alg.cljc", :end-column 11, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns true if g is a directed acyclic graph"}, prim-mst-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 553, :column 7, :end-line 553, :end-column 21, :arglists (quote ([wg] [wg n h visited acc])), :doc "An edge-list of an minimum spanning tree along with weights that\n  represents an MST of the given graph. Returns the MST edge-list\n  for un-weighted graphs.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([wg] [wg n h visited acc]), :arglists ([wg] [wg n h visited acc]), :arglists-meta (nil nil)}}, :name loom.alg/prim-mst-edges, :variadic false, :file "public/js/loom/alg.cljc", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([wg] [wg n h visited acc]), :arglists ([wg] [wg n h visited acc]), :arglists-meta (nil nil)}, :method-params ([wg] [wg n h visited acc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 553, :end-line 553, :max-fixed-arity 5, :fn-var true, :arglists ([wg] [wg n h visited acc]), :doc "An edge-list of an minimum spanning tree along with weights that\n  represents an MST of the given graph. Returns the MST edge-list\n  for un-weighted graphs."}, shortest-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 259, :column 7, :end-line 259, :end-column 20, :arglists (quote ([g start end])), :doc "Finds the shortest path from start to end in graph g, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."}, :name loom.alg/shortest-path, :variadic false, :file "public/js/loom/alg.cljc", :end-column 20, :method-params ([g start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g start end])), :doc "Finds the shortest path from start to end in graph g, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."}, bk-gen {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 686, :column 8, :end-line 686, :end-column 14, :private true, :arglists (quote ([g [r p x] stack]))}, :private true, :name loom.alg/bk-gen, :variadic false, :file "public/js/loom/alg.cljc", :end-column 14, :method-params ([g p__1884964 stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 686, :end-line 686, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g [r p x] stack]))}, init-estimates {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 197, :column 8, :end-line 197, :end-column 22, :private true, :arglists (quote ([graph start])), :doc "Initializes path cost estimates and paths from source to all vertices,\n   for Bellman-Ford algorithm"}, :private true, :name loom.alg/init-estimates, :variadic false, :file "public/js/loom/alg.cljc", :end-column 22, :method-params ([graph start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph start])), :doc "Initializes path cost estimates and paths from source to all vertices,\n   for Bellman-Ford algorithm"}, maximal-cliques {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 756, :column 7, :end-line 756, :end-column 22, :arglists (quote ([g])), :doc "Enumerate the maximal cliques using Bron-Kerbosch."}, :name loom.alg/maximal-cliques, :variadic false, :file "public/js/loom/alg.cljc", :end-column 22, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 756, :end-line 756, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Enumerate the maximal cliques using Bron-Kerbosch."}, connected-components {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 340, :column 7, :end-line 340, :end-column 27, :arglists (quote ([g])), :doc "Returns the connected components of graph g as a vector of vectors. If g\n  is directed, returns the weakly-connected components."}, :name loom.alg/connected-components, :variadic false, :file "public/js/loom/alg.cljc", :end-column 27, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns the connected components of graph g as a vector of vectors. If g\n  is directed, returns the weakly-connected components."}, johnson {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 301, :column 7, :end-line 301, :end-column 14, :arglists (quote ([g])), :doc "Finds all-pairs shortest paths using Bellman-Ford to remove any negative edges before\n  using Dijkstra's algorithm to find the shortest paths from each vertex to every other.\n  This algorithm is efficient for sparse graphs.\n\n  If the graph is unweighted, a default weight of 1 will be used. Note that it is more efficient\n  to use breadth-first spans for a graph with a uniform edge weight rather than Dijkstra's algorithm.\n  Most callers should use shortest-paths and allow the most efficient implementation be selected\n  for the graph."}, :name loom.alg/johnson, :variadic false, :file "public/js/loom/alg.cljc", :end-column 14, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Finds all-pairs shortest paths using Bellman-Ford to remove any negative edges before\n  using Dijkstra's algorithm to find the shortest paths from each vertex to every other.\n  This algorithm is efficient for sparse graphs.\n\n  If the graph is unweighted, a default weight of 1 will be used. Note that it is more efficient\n  to use breadth-first spans for a graph with a uniform edge weight rather than Dijkstra's algorithm.\n  Most callers should use shortest-paths and allow the most efficient implementation be selected\n  for the graph."}, connected? {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 360, :column 7, :end-line 360, :end-column 17, :arglists (quote ([g])), :doc "Returns true if g is connected"}, :name loom.alg/connected?, :variadic false, :file "public/js/loom/alg.cljc", :end-column 17, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns true if g is connected"}, relax-edge {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 178, :column 8, :end-line 178, :end-column 18, :private true, :arglists (quote ([[u v :as edge] weight [costs paths :as estimates]])), :doc "If there's a shorter path from s to v via u,\n    update our map of estimated path costs and\n   map of paths from source to vertex v"}, :private true, :name loom.alg/relax-edge, :variadic false, :file "public/js/loom/alg.cljc", :end-column 18, :method-params ([p__1884759 weight p__1884760]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[u v :as edge] weight [costs paths :as estimates]])), :doc "If there's a shorter path from s to v via u,\n    update our map of estimated path costs and\n   map of paths from source to vertex v"}, bf-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 122, :column 7, :end-line 122, :end-column 14, :arglists (quote ([g start end & opts])), :doc "Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights)", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(g start end opts)], :arglists ([g start end & opts]), :arglists-meta (nil)}}, :name loom.alg/bf-path, :variadic true, :file "public/js/loom/alg.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(g start end opts)], :arglists ([g start end & opts]), :arglists-meta (nil)}, :method-params [(g start end opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists ([g start end & opts]), :doc "Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights)"}, bf-path-bi {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 128, :column 7, :end-line 128, :end-column 17, :arglists (quote ([g start end])), :doc "Using a bidirectional breadth-first search, finds a path from start to\n  end with the fewest hops (i.e. irrespective of edge weights). Can be much\n  faster than a unidirectional search on certain types of graphs"}, :name loom.alg/bf-path-bi, :variadic false, :file "public/js/loom/alg.cljc", :end-column 17, :method-params ([g start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g start end])), :doc "Using a bidirectional breadth-first search, finds a path from start to\n  end with the fewest hops (i.e. irrespective of edge weights). Can be much\n  faster than a unidirectional search on certain types of graphs"}, dijkstra-traverse {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 137, :column 7, :end-line 137, :end-column 24, :arglists (quote ([g] [g start] [g start f])), :doc "Returns a lazy-seq of [current-node state] where state is a map in\n  the format {node [distance predecessor]}. When f is provided,\n  returns a lazy-seq of (f node state) for each node", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g start] [g start f]), :arglists ([g] [g start] [g start f]), :arglists-meta (nil nil nil)}}, :name loom.alg/dijkstra-traverse, :variadic false, :file "public/js/loom/alg.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g start] [g start f]), :arglists ([g] [g start] [g start f]), :arglists-meta (nil nil nil)}, :method-params ([g] [g start] [g start f]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists ([g] [g start] [g start f]), :doc "Returns a lazy-seq of [current-node state] where state is a map in\n  the format {node [distance predecessor]}. When f is provided,\n  returns a lazy-seq of (f node state) for each node"}, astar-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 597, :column 7, :end-line 597, :end-column 17, :arglists (quote ([g src target heur] [g src target heur q explored])), :doc "Returns the shortest path using A* algorithm. Returns a map of predecessors.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([g src target heur] [g src target heur q explored]), :arglists ([g src target heur] [g src target heur q explored]), :arglists-meta (nil nil)}}, :name loom.alg/astar-path, :variadic false, :file "public/js/loom/alg.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([g src target heur] [g src target heur q explored]), :arglists ([g src target heur] [g src target heur q explored]), :arglists-meta (nil nil)}, :method-params ([g src target heur] [g src target heur q explored]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 597, :end-line 597, :max-fixed-arity 6, :fn-var true, :arglists ([g src target heur] [g src target heur q explored]), :doc "Returns the shortest path using A* algorithm. Returns a map of predecessors."}, max-flow {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 517, :column 7, :end-line 517, :end-column 15, :arglists (quote ([g source sink & {:keys [method], :or {method :edmonds-karp}}])), :doc "Returns [flow-map flow-value], where flow-map is a weighted adjacency map\n   representing the maximum flow.  The argument should be a weighted digraph,\n   where the edge weights are flow capacities.  Source and sink are the vertices\n   representing the flow source and sink vertices.  Optionally, pass in\n     :method :algorithm to use.  Currently, the only option is :edmonds-karp .", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(g source sink {:keys [method], :or {method :edmonds-karp}})], :arglists ([g source sink & {:keys [method], :or {method :edmonds-karp}}]), :arglists-meta (nil)}}, :name loom.alg/max-flow, :variadic true, :file "public/js/loom/alg.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(g source sink {:keys [method], :or {method :edmonds-karp}})], :arglists ([g source sink & {:keys [method], :or {method :edmonds-karp}}]), :arglists-meta (nil)}, :method-params [(g source sink {:keys [method], :or {method :edmonds-karp}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 517, :end-line 517, :max-fixed-arity 3, :fn-var true, :arglists ([g source sink & {:keys [method], :or {method :edmonds-karp}}]), :doc "Returns [flow-map flow-value], where flow-map is a weighted adjacency map\n   representing the maximum flow.  The argument should be a weighted digraph,\n   where the edge weights are flow capacities.  Source and sink are the vertices\n   representing the flow source and sink vertices.  Optionally, pass in\n     :method :algorithm to use.  Currently, the only option is :edmonds-karp ."}, connect {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 388, :column 7, :end-line 388, :end-column 14, :arglists (quote ([g])), :doc "Returns graph g with all connected components connected to each other"}, :name loom.alg/connect, :variadic false, :file "public/js/loom/alg.cljc", :end-column 14, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 388, :end-line 388, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns graph g with all connected components connected to each other"}, coloring? {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 486, :column 7, :end-line 486, :end-column 16, :arglists (quote ([g coloring])), :doc "Returns true if a map of nodes to colors is a proper coloring of a graph."}, :name loom.alg/coloring?, :variadic false, :file "public/js/loom/alg.cljc", :end-column 16, :method-params ([g coloring]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 486, :end-line 486, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g coloring])), :doc "Returns true if a map of nodes to colors is a proper coloring of a graph."}, can-relax-edge? {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 169, :column 8, :end-line 169, :end-column 23, :private true, :arglists (quote ([[u v :as edge] weight costs])), :doc "Tests for whether we can improve the shortest path to v found so far\n   by going through u."}, :private true, :name loom.alg/can-relax-edge?, :variadic false, :file "public/js/loom/alg.cljc", :end-column 23, :method-params ([p__1884756 weight costs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[u v :as edge] weight costs])), :doc "Tests for whether we can improve the shortest path to v found so far\n   by going through u."}, bipartite-color {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 426, :column 7, :end-line 426, :end-column 22, :arglists (quote ([g])), :doc "Attempts a two-coloring of graph g. When successful, returns a map of\n  nodes to colors (1 or 0). Otherwise, returns nil."}, :name loom.alg/bipartite-color, :variadic false, :file "public/js/loom/alg.cljc", :end-column 22, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 426, :end-line 426, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Attempts a two-coloring of graph g. When successful, returns a map of\n  nodes to colors (1 or 0). Otherwise, returns nil."}, prim-mst {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 586, :column 7, :end-line 586, :end-column 15, :arglists (quote ([wg])), :doc "Minimum spanning tree of given graph. If the graph contains more than one\n   component then returns a spanning forest of minimum spanning trees."}, :name loom.alg/prim-mst, :variadic false, :file "public/js/loom/alg.cljc", :end-column 15, :method-params ([wg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 586, :end-line 586, :max-fixed-arity 1, :fn-var true, :arglists (quote ([wg])), :doc "Minimum spanning tree of given graph. If the graph contains more than one\n   component then returns a spanning forest of minimum spanning trees."}, dijkstra-span {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 149, :column 7, :end-line 149, :end-column 20, :arglists (quote ([g] [g start])), :doc "Finds all shortest distances from start. Returns a map in the\n  format {node {successor distance}}", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}}, :name loom.alg/dijkstra-span, :variadic false, :file "public/js/loom/alg.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}, :method-params ([g] [g start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g start]), :doc "Finds all shortest distances from start. Returns a map in the\n  format {node {successor distance}}"}, all-pairs-shortest-paths {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 332, :column 7, :end-line 332, :end-column 31, :arglists (quote ([g])), :doc "Finds all-pairs shortest paths in a graph. Uses Johnson's algorithm for weighted graphs\n  which is efficient for sparse graphs. Breadth-first spans are used for unweighted graphs."}, :name loom.alg/all-pairs-shortest-paths, :variadic false, :file "public/js/loom/alg.cljc", :end-column 31, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Finds all-pairs shortest paths in a graph. Uses Johnson's algorithm for weighted graphs\n  which is efficient for sparse graphs. Breadth-first spans are used for unweighted graphs."}, edge-weights {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 542, :column 8, :end-line 542, :end-column 20, :private true, :arglists (quote ([wg v])), :doc "Wrapper function to return edges along with weights for a given graph.\n   For un-weighted graphs a default value of one is produced. The function\n   returns values of the form [[[u v] 10] [[x y] 20] ...]"}, :private true, :name loom.alg/edge-weights, :variadic false, :file "public/js/loom/alg.cljc", :end-column 20, :method-params ([wg v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 542, :end-line 542, :max-fixed-arity 2, :fn-var true, :arglists (quote ([wg v])), :doc "Wrapper function to return edges along with weights for a given graph.\n   For un-weighted graphs a default value of one is produced. The function\n   returns values of the form [[[u v] 10] [[x y] 20] ...]"}, strongly-connected? {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 384, :column 7, :end-line 384, :end-column 26, :arglists (quote ([g]))}, :name loom.alg/strongly-connected?, :variadic false, :file "public/js/loom/alg.cljc", :end-column 26, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g]))}, bellman-ford-transform {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 286, :column 8, :end-line 286, :end-column 30, :private true, :arglists (quote ([wg])), :doc "Helper function for Johnson's algorithm. Uses Bellman-Ford to remove negative weights."}, :private true, :name loom.alg/bellman-ford-transform, :variadic false, :file "public/js/loom/alg.cljc", :end-column 30, :method-params ([wg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 1, :fn-var true, :arglists (quote ([wg])), :doc "Helper function for Johnson's algorithm. Uses Bellman-Ford to remove negative weights."}, pre-traverse {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 32, :column 7, :end-line 32, :end-column 19, :arglists (quote ([g] [g start])), :doc "Traverses graph g depth-first from start. Returns a lazy seq of nodes.\n  When no starting node is provided, traverses the entire graph, connected\n  or not.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}}, :name loom.alg/pre-traverse, :variadic false, :file "public/js/loom/alg.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}, :method-params ([g] [g start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g start]), :doc "Traverses graph g depth-first from start. Returns a lazy seq of nodes.\n  When no starting node is provided, traverses the entire graph, connected\n  or not."}, bf-span {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 106, :column 7, :end-line 106, :end-column 14, :arglists (quote ([g] [g start])), :doc "Returns a breadth-first spanning tree of the form {node [successors]}", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}}, :name loom.alg/bf-span, :variadic false, :file "public/js/loom/alg.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}, :method-params ([g] [g start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g start]), :doc "Returns a breadth-first spanning tree of the form {node [successors]}"}, bf-traverse {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 83, :column 7, :end-line 83, :end-column 18, :arglists (quote ([g] [g start] [g start & opts])), :doc "Traverses graph g breadth-first from start. When option :f is provided,\n  returns a lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When option :when is provided,\n  filters successors with (f neighbor predecessor depth).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start] [g start & opts]), :arglists-meta (nil nil nil)}}, :name loom.alg/bf-traverse, :variadic true, :file "public/js/loom/alg.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start] [g start & opts]), :arglists-meta (nil nil nil)}, :method-params ([g] [g start]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g start] [g start & opts]), :doc "Traverses graph g breadth-first from start. When option :f is provided,\n  returns a lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When option :when is provided,\n  filters successors with (f neighbor predecessor depth)."}, post-traverse {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 58, :column 7, :end-line 58, :end-column 20, :arglists (quote ([g] [g start & opts])), :doc "Traverses graph g depth-first, post-order from start. Returns a\n  vector of the nodes.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([g]), :arglists ([g] [g start & opts]), :arglists-meta (nil nil)}}, :name loom.alg/post-traverse, :variadic true, :file "public/js/loom/alg.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([g]), :arglists ([g] [g start & opts]), :arglists-meta (nil nil)}, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g start & opts]), :doc "Traverses graph g depth-first, post-order from start. Returns a\n  vector of the nodes."}, topsort {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 66, :column 7, :end-line 66, :end-column 14, :arglists (quote ([g] [g start])), :doc "Topological sort of a directed acyclic graph (DAG). Returns nil if\n  g contains any cycles.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}}, :name loom.alg/topsort, :variadic false, :file "public/js/loom/alg.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g start]), :arglists ([g] [g start]), :arglists-meta (nil nil)}, :method-params ([g] [g start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g start]), :doc "Topological sort of a directed acyclic graph (DAG). Returns nil if\n  g contains any cycles."}, dijkstra-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/loom/alg.cljc", :line 164, :column 7, :end-line 164, :end-column 20, :arglists (quote ([g start end])), :doc "Finds the shortest path from start to end"}, :name loom.alg/dijkstra-path, :variadic false, :file "public/js/loom/alg.cljc", :end-column 20, :method-params ([g start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 3, :fn-var true, :arglists (quote ([g start end])), :doc "Finds the shortest path from start to end"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:edmonds-karp :else :method :loops :seen :return-seen :f}, :order [:seen :return-seen :f :loops :method :edmonds-karp :else]}, :doc "Graph algorithms. Any graph record/type that satisfies the\nGraph, Digraph, or WeightedGraph protocols (as appropriate per algorithm)\ncan use these functions."}