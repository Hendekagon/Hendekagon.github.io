;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dynomics.ui.svg, :imports nil, :requires nil, :uses nil, :defs {trs {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/svg.cljc", :line 4, :column 7, :end-line 4, :end-column 10, :arglists (quote ([& transforms])), :doc "Returns an SVG transform string from the given list e.g. (trs :t [0.1 0.2] :s [0.5 0.5] :r [1.0])", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(transforms)], :arglists ([& transforms]), :arglists-meta (nil)}}, :name dynomics.ui.svg/trs, :variadic true, :file "src/dynomics/ui/svg.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(transforms)], :arglists ([& transforms]), :arglists-meta (nil)}, :method-params [(transforms)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 0, :fn-var true, :arglists ([& transforms]), :doc "Returns an SVG transform string from the given list e.g. (trs :t [0.1 0.2] :s [0.5 0.5] :r [1.0])"}, make-bezier {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/svg.cljc", :line 13, :column 7, :end-line 13, :end-column 18, :arglists (quote ([[point & control-points]]))}, :name dynomics.ui.svg/make-bezier, :variadic false, :file "src/dynomics/ui/svg.cljc", :end-column 18, :method-params ([p__379657]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[point & control-points]]))}, to-svg-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/svg.cljc", :line 16, :column 7, :end-line 16, :end-column 18, :arglists (quote ([[{[fpx fpy] :point, [[fcx fcy]] :control-points, :as first-point} & points]]))}, :name dynomics.ui.svg/to-svg-path, :variadic false, :file "src/dynomics/ui/svg.cljc", :end-column 18, :method-params ([p__379660]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{[fpx fpy] :point, [[fcx fcy]] :control-points, :as first-point} & points]]))}, to-smooth-svg-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/svg.cljc", :line 27, :column 7, :end-line 27, :end-column 25, :arglists (quote ([[{[fpx fpy] :point, [[fcx fcy]] :control-points, :as first-point} & points]]))}, :name dynomics.ui.svg/to-smooth-svg-path, :variadic false, :file "src/dynomics/ui/svg.cljc", :end-column 25, :method-params ([p__379689]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{[fpx fpy] :point, [[fcx fcy]] :control-points, :as first-point} & points]]))}, to-closed-svg-path {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/svg.cljc", :line 36, :column 7, :end-line 36, :end-column 25, :arglists (quote ([[{[fpx fpy] :point, [[fcx fcy]] :control-points, :as first-point} & points]]))}, :name dynomics.ui.svg/to-closed-svg-path, :variadic false, :file "src/dynomics/ui/svg.cljc", :end-column 25, :method-params ([p__379718]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{[fpx fpy] :point, [[fcx fcy]] :control-points, :as first-point} & points]]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:r :control-points :s :point :t}, :order [:t :r :s :point :control-points]}, :doc "Functions for SVG string generation etc"}