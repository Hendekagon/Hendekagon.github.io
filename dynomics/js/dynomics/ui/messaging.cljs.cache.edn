;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, alt! cljs.core.async.macros}, :excludes #{}, :name dynomics.ui.messaging, :imports {WebSocket goog.net.WebSocket}, :requires {reader cljs.reader, cljs.reader cljs.reader, async cljs.core.async, cljs.core.async cljs.core.async, events goog.events, goog.events goog.events, WebSocket goog.net.WebSocket}, :uses {pub cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, sub cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {subscribe! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :line 17, :column 7, :end-line 17, :end-column 17, :arglists (quote ([state topic f] [state component])), :doc "Subscribe the given component to its topic with its handler", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([state topic f] [state component]), :arglists ([state topic f] [state component]), :arglists-meta (nil nil)}}, :name dynomics.ui.messaging/subscribe!, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([state topic f] [state component]), :arglists ([state topic f] [state component]), :arglists-meta (nil nil)}, :method-params ([state topic f] [state component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists ([state topic f] [state component]), :doc "Subscribe the given component to its topic with its handler"}, setup-updates {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :line 28, :column 7, :end-line 28, :end-column 20, :arglists (quote ([ch g]))}, :name dynomics.ui.messaging/setup-updates, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :end-column 20, :method-params ([ch g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch g]))}, connect! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :line 31, :column 7, :end-line 31, :end-column 15, :arglists (quote ([{{ws :ws, ws-uri :ws-uri} :messaging, :as s}]))}, :name dynomics.ui.messaging/connect!, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :end-column 15, :method-params ([p__380047]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{ws :ws, ws-uri :ws-uri} :messaging, :as s}]))}, make-channels {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :line 34, :column 7, :end-line 34, :end-column 20, :arglists (quote ([] [f])), :doc "\n  Configures messaging channels for the application:\n\n  * ws a websocket for talking with the server\n  * state-updates for state update requests\n  * msgs for inter-component messaging\n\n  ", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [f]), :arglists ([] [f]), :arglists-meta (nil nil)}}, :name dynomics.ui.messaging/make-channels, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/ui/messaging.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [f]), :arglists ([] [f]), :arglists-meta (nil nil)}, :method-params ([] [f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists ([] [f]), :doc "\n  Configures messaging channels for the application:\n\n  * ws a websocket for talking with the server\n  * state-updates for state update requests\n  * msgs for inter-component messaging\n\n  "}}, :require-macros {asm cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:state-updates :ws-uri :ws :message-pub :verb :else :read-channel :recur :type :topic :subscriptions :messaging :write-channel :handler :message-channel}, :order [:messaging :message-channel :message-pub :recur :else :subscriptions :topic :handler :ws :ws-uri :verb :type :state-updates :read-channel :write-channel]}, :doc "\n  Handling messages to/from server,\n  and internally\n\n  WebSocket/async pub/sub\n\n  "}