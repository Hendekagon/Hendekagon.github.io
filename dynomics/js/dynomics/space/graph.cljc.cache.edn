;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dynomics.space.graph, :imports nil, :requires {la loom.alg, loom.alg loom.alg, lg loom.graph, loom.graph loom.graph}, :uses nil, :defs {make-regions {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 89, :column 7, :end-line 89, :end-column 19, :arglists (quote ([{{edges :edges, :as space} :space, :as state}]))}, :name dynomics.space.graph/make-regions, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 19, :method-params ([p__1888551]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{edges :edges, :as space} :space, :as state}]))}, nodes-from-sum {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 58, :column 7, :end-line 58, :end-column 21, :arglists (quote ([s]))}, :name dynomics.space.graph/nodes-from-sum, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, as-matrix {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([{:keys [nodes edges]}] [nodes edges])), :doc "\n  Returns an adjacency matrix representation of the given graph\n  in undirected form.\n  Assumes nodes are numbered from 0-n\n  ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [nodes edges]}] [nodes edges]), :arglists ([{:keys [nodes edges]}] [nodes edges]), :arglists-meta (nil nil)}}, :name dynomics.space.graph/as-matrix, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [nodes edges]}] [nodes edges]), :arglists ([{:keys [nodes edges]}] [nodes edges]), :arglists-meta (nil nil)}, :method-params ([{:keys [nodes edges]}] [nodes edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [nodes edges]}] [nodes edges]), :doc "\n  Returns an adjacency matrix representation of the given graph\n  in undirected form.\n  Assumes nodes are numbered from 0-n\n  "}, as-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 22, :column 7, :end-line 22, :end-column 15, :arglists (quote ([m]))}, :name dynomics.space.graph/as-edges, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 15, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, cycles {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 69, :column 7, :end-line 69, :end-column 13, :arglists (quote ([g] [g ntr])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g ntr]), :arglists ([g] [g ntr]), :arglists-meta (nil nil)}}, :name dynomics.space.graph/cycles, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g ntr]), :arglists ([g] [g ntr]), :arglists-meta (nil nil)}, :method-params ([g] [g ntr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g ntr])}, sum-graph {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 53, :column 7, :end-line 53, :end-column 16, :arglists (quote ([m]))}, :name dynomics.space.graph/sum-graph, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, simplify-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 10, :column 7, :end-line 10, :end-column 21, :arglists (quote ([edges]))}, :name dynomics.space.graph/simplify-edges, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 21, :method-params ([edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edges]))}, as-connections {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 13, :column 7, :end-line 13, :end-column 21, :arglists (quote ([edges edgez])), :doc "Returns a nested list of connections (paths to node connections)\n  from the given edges [[node1 node2] [node3 node4]\n  and edgez, a set of connection edges}"}, :name dynomics.space.graph/as-connections, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 21, :method-params ([edges edgez]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edges edgez])), :doc "Returns a nested list of connections (paths to node connections)\n  from the given edges [[node1 node2] [node3 node4]\n  and edgez, a set of connection edges}"}, -- {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 7, :column 7, :end-line 7, :end-column 9, :arglists (quote ([[a b]]))}, :name dynomics.space.graph/--, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 9, :method-params ([p__1888488]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[a b]]))}, pairs {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 64, :column 7, :end-line 64, :end-column 12, :arglists (quote ([l]))}, :name dynomics.space.graph/pairs, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :end-column 12, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:space :n :regions :e :nodes :graph :edges}, :order [:nodes :edges :graph :e :n :space :regions]}, :doc "Functions for querying and manipulating the underlying graph"}