;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dynomics.space.graph, :imports nil, :requires {la loom.alg, loom.alg loom.alg, lg loom.graph, loom.graph loom.graph}, :uses nil, :defs {as-connections {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 6, :column 7, :end-line 6, :end-column 21, :arglists (quote ([edges edgez])), :doc "Returns a nested list of connections (paths to node connections)\n  from the given edges [[node1 node2] [node3 node4]\n  and edgez, a set of connection edges}"}, :name dynomics.space.graph/as-connections, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 21, :method-params ([edges edgez]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edges edgez])), :doc "Returns a nested list of connections (paths to node connections)\n  from the given edges [[node1 node2] [node3 node4]\n  and edgez, a set of connection edges}"}, as-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 15, :column 7, :end-line 15, :end-column 15, :arglists (quote ([m]))}, :name dynomics.space.graph/as-edges, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 15, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, as-matrix {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([{:keys [nodes edges]}] [nodes edges])), :doc "\n  Returns an adjacency matrix representation of the given graph\n  in undirected form.\n  Assumes nodes are numbered from 0-n\n  ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [nodes edges]}] [nodes edges]), :arglists ([{:keys [nodes edges]}] [nodes edges]), :arglists-meta (nil nil)}}, :name dynomics.space.graph/as-matrix, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [nodes edges]}] [nodes edges]), :arglists ([{:keys [nodes edges]}] [nodes edges]), :arglists-meta (nil nil)}, :method-params ([{:keys [nodes edges]}] [nodes edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [nodes edges]}] [nodes edges]), :doc "\n  Returns an adjacency matrix representation of the given graph\n  in undirected form.\n  Assumes nodes are numbered from 0-n\n  "}, sum-graph {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([m]))}, :name dynomics.space.graph/sum-graph, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, nodes-from-sum {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([s]))}, :name dynomics.space.graph/nodes-from-sum, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, pairs {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 57, :column 7, :end-line 57, :end-column 12, :arglists (quote ([l]))}, :name dynomics.space.graph/pairs, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 12, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, cycles {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 59, :column 7, :end-line 59, :end-column 13, :arglists (quote ([g] [g ntr])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g ntr]), :arglists ([g] [g ntr]), :arglists-meta (nil nil)}}, :name dynomics.space.graph/cycles, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([g] [g ntr]), :arglists ([g] [g ntr]), :arglists-meta (nil nil)}, :method-params ([g] [g ntr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists ([g] [g ntr])}, make-regions {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/graph.cljc", :line 79, :column 7, :end-line 79, :end-column 19, :arglists (quote ([{{edges :edges, :as space} :space, :as state}]))}, :name dynomics.space.graph/make-regions, :variadic false, :file "src/dynomics/space/graph.cljc", :end-column 19, :method-params ([p__382168]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{edges :edges, :as space} :space, :as state}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:space :n :regions :e :nodes :graph :edges}, :order [:nodes :edges :graph :e :n :space :regions]}, :doc "Functions for querying and manipulating the underlying graph"}