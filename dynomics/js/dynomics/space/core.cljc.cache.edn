;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dynomics.space.core, :imports nil, :requires {lg loom.graph, loom.graph loom.graph, la loom.alg, loom.alg loom.alg, dynomics.space.graph dynomics.space.graph, cs clojure.set, clojure.set clojure.set}, :uses {as-connections dynomics.space.graph}, :defs {dot {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 52, :column 7, :end-line 52, :end-column 10, :arglists (quote ([& x])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(x)], :arglists ([& x]), :arglists-meta (nil)}}, :name dynomics.space.core/dot, :variadic true, :file "src/dynomics/space/core.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(x)], :arglists ([& x]), :arglists-meta (nil)}, :method-params [(x)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists ([& x])}, random-points {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 242, :column 7, :end-line 242, :end-column 20, :arglists (quote ([n]))}, :name dynomics.space.core/random-points, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, update-compatibility-info {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 320, :column 7, :end-line 320, :end-column 32, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id])), :doc "Following a node-type change, update the\n  compatibility info for its connections", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists-meta (nil nil)}}, :name dynomics.space.core/update-compatibility-info, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists-meta (nil nil)}, :method-params ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 2, :fn-var true, :arglists ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :doc "Following a node-type change, update the\n  compatibility info for its connections"}, mirror-node {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 62, :column 7, :end-line 62, :end-column 18, :arglists (quote ([[x y] path {node-scale :node-scale, :as space}])), :doc "Returns the pair of control points with\n  mirrored positions for the given control point"}, :name dynomics.space.core/mirror-node, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 18, :method-params ([p__1888595 path p__1888596]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y] path {node-scale :node-scale, :as space}])), :doc "Returns the pair of control points with\n  mirrored positions for the given control point"}, r2d {:name dynomics.space.core/r2d, :file "src/dynomics/space/core.cljc", :line 38, :column 1, :end-line 38, :end-column 9, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 38, :column 6, :end-line 38, :end-column 9}}, quadrant-info {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 287, :column 7, :end-line 287, :end-column 20, :arglists (quote ([nodez nodes]))}, :name dynomics.space.core/quadrant-info, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 20, :method-params ([nodez nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodez nodes]))}, grid-points {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 245, :column 7, :end-line 245, :end-column 18, :arglists (quote ([n] [nx ny])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [nx ny]), :arglists ([n] [nx ny]), :arglists-meta (nil nil)}}, :name dynomics.space.core/grid-points, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [nx ny]), :arglists ([n] [nx ny]), :arglists-meta (nil nil)}, :method-params ([n] [nx ny]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists ([n] [nx ny])}, add-node {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 197, :column 7, :end-line 197, :end-column 15, :arglists (quote ([{{:keys [nodes max-node-id]} :space, p :mouse-position, :as state}])), :doc "Adds a new node at the given mouse position"}, :name dynomics.space.core/add-node, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 15, :method-params ([p__1888626]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes max-node-id]} :space, p :mouse-position, :as state}])), :doc "Adds a new node at the given mouse position"}, dmp {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 49, :column 7, :end-line 49, :end-column 10, :arglists (quote ([points]))}, :name dynomics.space.core/dmp, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 10, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, make-phase-space {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 275, :column 7, :end-line 275, :end-column 23, :arglists (quote ([]))}, :name dynomics.space.core/make-phase-space, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, just-ids {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 285, :column 7, :end-line 285, :end-column 15, :arglists (quote ([nodes]))}, :name dynomics.space.core/just-ids, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 15, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes]))}, quadrants-types-by-position {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 156, :column 7, :end-line 156, :end-column 34, :arglists (quote ([{r1 :node-type, p1 :position} {r2 :node-type, p2 :position}])), :doc "\n  Returns the quadrant types of the given vectors\n  e.g. (quadrants-types-by-position {:node-type 10 :position [1 0]} {:node-type 5 :position [-1 0]})\n  => ((1 2) (1 2))\n\n  TODO need to return the types in the right order, as this\n  will give a false-positive when 2 nodes of the same type are\n  connected by the same connectors, as it doesn't take into account\n  that the nodes themselves are above and below eachother\n  "}, :name dynomics.space.core/quadrants-types-by-position, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 34, :method-params ([p__1888607 p__1888608]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{r1 :node-type, p1 :position} {r2 :node-type, p2 :position}])), :doc "\n  Returns the quadrant types of the given vectors\n  e.g. (quadrants-types-by-position {:node-type 10 :position [1 0]} {:node-type 5 :position [-1 0]})\n  => ((1 2) (1 2))\n\n  TODO need to return the types in the right order, as this\n  will give a false-positive when 2 nodes of the same type are\n  connected by the same connectors, as it doesn't take into account\n  that the nodes themselves are above and below eachother\n  "}, to-local {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 54, :column 7, :end-line 54, :end-column 15, :arglists (quote ([[x y] [_ _ nid _ cid] {node-scale :node-scale, :as space}]))}, :name dynomics.space.core/to-local, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 15, :method-params ([p__1888582 p__1888583 p__1888584]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y] [_ _ nid _ cid] {node-scale :node-scale, :as space}]))}, make-ds {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 249, :column 7, :end-line 249, :end-column 14, :arglists (quote ([] [v])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}}, :name dynomics.space.core/make-ds, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}, :method-params ([] [v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 1, :fn-var true, :arglists ([] [v])}, I {:name dynomics.space.core/I, :file "src/dynomics/space/core.cljc", :line 20, :column 1, :end-line 20, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 20, :column 6, :end-line 20, :end-column 7}}, cos {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 24, :column 7, :end-line 24, :end-column 10, :arglists (quote ([x]))}, :name dynomics.space.core/cos, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, remove-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 212, :column 7, :end-line 212, :end-column 19, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Returns the state with the given edges removed"}, :name dynomics.space.core/remove-edges, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 19, :method-params ([p__1888635]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Returns the state with the given edges removed"}, F {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 14, :column 7, :end-line 14, :end-column 8, :arglists (quote ([f y]))}, :name dynomics.space.core/F, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 8, :method-params ([f y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f y]))}, unit {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 28, :column 7, :end-line 28, :end-column 11, :arglists (quote ([x]))}, :name dynomics.space.core/unit, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, c+ {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 47, :column 7, :end-line 47, :end-column 9, :arglists (quote ([a b]))}, :name dynomics.space.core/c+, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 9, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, simplify-connections {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 355, :column 7, :end-line 355, :end-column 27, :arglists (quote ([[{:keys [nodes edges]}]]))}, :name dynomics.space.core/simplify-connections, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 27, :method-params ([p__1888752]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{:keys [nodes edges]}]]))}, PI {:name dynomics.space.core/PI, :file "src/dynomics/space/core.cljc", :line 32, :column 1, :end-line 32, :end-column 8, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 32, :column 6, :end-line 32, :end-column 8}}, default-connections {:name dynomics.space.core/default-connections, :file "src/dynomics/space/core.cljc", :line 181, :column 1, :end-line 181, :end-column 25, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 181, :column 6, :end-line 181, :end-column 25}}, make-ds2 {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 256, :column 7, :end-line 256, :end-column 15, :arglists (quote ([f n-points]))}, :name dynomics.space.core/make-ds2, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 15, :method-params ([f n-points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f n-points]))}, connections-by-vector {:name dynomics.space.core/connections-by-vector, :file "src/dynomics/space/core.cljc", :line 178, :column 1, :end-line 178, :end-column 27, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 178, :column 6, :end-line 178, :end-column 27}}, P {:name dynomics.space.core/P, :file "src/dynomics/space/core.cljc", :line 12, :column 1, :end-line 12, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 12, :column 6, :end-line 12, :end-column 7}}, J {:name dynomics.space.core/J, :file "src/dynomics/space/core.cljc", :line 18, :column 1, :end-line 18, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 18, :column 6, :end-line 18, :end-column 7}}, deselect-all {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 209, :column 7, :end-line 209, :end-column 19, :arglists (quote ([state]))}, :name dynomics.space.core/deselect-all, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, C {:name dynomics.space.core/C, :file "src/dynomics/space/core.cljc", :line 16, :column 1, :end-line 16, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 16, :column 6, :end-line 16, :end-column 7}}, c* {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 44, :column 7, :end-line 44, :end-column 9, :arglists (quote ([[ar ai] [br bi]]))}, :name dynomics.space.core/c*, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 9, :method-params ([p__1888568 p__1888569]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[ar ai] [br bi]]))}, node-types {:name dynomics.space.core/node-types, :file "src/dynomics/space/core.cljc", :line 77, :column 1, :end-line 77, :end-column 16, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 77, :column 6, :end-line 77, :end-column 16}}, angle {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 40, :column 7, :end-line 40, :end-column 12, :arglists (quote ([[x y]]))}, :name dynomics.space.core/angle, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 12, :method-params ([p__1888562]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y]]))}, PI2 {:name dynomics.space.core/PI2, :file "src/dynomics/space/core.cljc", :line 34, :column 1, :end-line 34, :end-column 9, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 34, :column 6, :end-line 34, :end-column 9}}, compare-quadrants {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 175, :column 7, :end-line 175, :end-column 24, :arglists (quote ([qs]))}, :name dynomics.space.core/compare-quadrants, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 24, :method-params ([qs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qs]))}, remove-selected-nodes {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 223, :column 7, :end-line 223, :end-column 28, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Removes the selected nodes and their edges"}, :name dynomics.space.core/remove-selected-nodes, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 28, :method-params ([p__1888652]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Removes the selected nodes and their edges"}, p2c {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 42, :column 7, :end-line 42, :end-column 10, :arglists (quote ([[r theta]]))}, :name dynomics.space.core/p2c, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 10, :method-params ([p__1888565]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[r theta]]))}, round {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([x]))}, :name dynomics.space.core/round, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, set-node-type {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 336, :column 7, :end-line 336, :end-column 20, :arglists (quote ([id])), :doc "Returns a function to set the given selected nodes\n  to the given node type id"}, :name dynomics.space.core/set-node-type, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 20, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns a function to set the given selected nodes\n  to the given node type id"}, make-intersection-node {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 185, :column 7, :end-line 185, :end-column 29, :arglists (quote ([type-id] [type-id position])), :doc "Returns a node of the given type", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type-id] [type-id position]), :arglists ([type-id] [type-id position]), :arglists-meta (nil nil)}}, :name dynomics.space.core/make-intersection-node, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type-id] [type-id position]), :arglists ([type-id] [type-id position]), :arglists-meta (nil nil)}, :method-params ([type-id] [type-id position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists ([type-id] [type-id position]), :doc "Returns a node of the given type"}, PIb4 {:name dynomics.space.core/PIb4, :file "src/dynomics/space/core.cljc", :line 36, :column 1, :end-line 36, :end-column 10, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 36, :column 6, :end-line 36, :end-column 10}}, make-connections {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 303, :column 7, :end-line 303, :end-column 23, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "Returns the given state with any connections that need to be\n  made added to the edges map. Only connect nodes if there are two\n  selected. Note that the connection is undirected"}, :name dynomics.space.core/make-connections, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 23, :method-params ([p__1888709]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "Returns the given state with any connections that need to be\n  made added to the edges map. Only connect nodes if there are two\n  selected. Note that the connection is undirected"}, abs {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 30, :column 7, :end-line 30, :end-column 10, :arglists (quote ([x]))}, :name dynomics.space.core/abs, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, update-ds {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 237, :column 7, :end-line 237, :end-column 16, :arglists (quote ([{:keys [f], :as s}]))}, :name dynomics.space.core/update-ds, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 16, :method-params ([p__1888666]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [f], :as s}]))}, add-compatibility-info {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 292, :column 7, :end-line 292, :end-column 29, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "\n  Returns the given state with a map of node-node compatibilities added,\n  of the form {[nodeid1 nodeid2] true [nodeid4 nodeid5] false}\n  "}, :name dynomics.space.core/add-compatibility-info, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 29, :method-params ([p__1888700]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "\n  Returns the given state with a map of node-node compatibilities added,\n  of the form {[nodeid1 nodeid2] true [nodeid4 nodeid5] false}\n  "}, make-some-nodes {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 270, :column 7, :end-line 270, :end-column 22, :arglists (quote ([n]))}, :name dynomics.space.core/make-some-nodes, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, sin {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 26, :column 7, :end-line 26, :end-column 10, :arglists (quote ([x]))}, :name dynomics.space.core/sin, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, simplify-connection {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 353, :column 7, :end-line 353, :end-column 26, :arglists (quote ([[_ _ nid _ cid]]))}, :name dynomics.space.core/simplify-connection, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 26, :method-params ([p__1888749]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[_ _ nid _ cid]]))}, add-graph {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 234, :column 7, :end-line 234, :end-column 16, :arglists (quote ([{edges :edges, :as space}]))}, :name dynomics.space.core/add-graph, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 16, :method-params ([p__1888661]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{edges :edges, :as space}]))}, insert-in {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 358, :column 7, :end-line 358, :end-column 16, :arglists (quote ([v i x]))}, :name dynomics.space.core/insert-in, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 16, :method-params ([v i x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v i x]))}, ds-evolution {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 263, :column 7, :end-line 263, :end-column 19, :arglists (quote ([n-time-points expansion rotation] [n-time-points system])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n-time-points expansion rotation] [n-time-points system]), :arglists ([n-time-points expansion rotation] [n-time-points system]), :arglists-meta (nil nil)}}, :name dynomics.space.core/ds-evolution, :variadic false, :file "src/dynomics/space/core.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n-time-points expansion rotation] [n-time-points system]), :arglists ([n-time-points expansion rotation] [n-time-points system]), :arglists-meta (nil nil)}, :method-params ([n-time-points expansion rotation] [n-time-points system]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 3, :fn-var true, :arglists ([n-time-points expansion rotation] [n-time-points system])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:description :move-offset :last-node-added :clockwise :intersection :remove :max-node-id :space :rotation :stability :verb :octants :node-scale :repellor :mouse-position :type :stable :points :node-type :unstable :attractor :compatibilities :saddle :nodes :id :graph :position :f :action :anticlockwise :quadrants :connections :selected-nodes :set :connection :edges :spiral}, :order [:node-scale :nodes :position :space :connections :stability :type :id :octants :quadrants :stable :attractor :unstable :repellor :saddle :rotation :spiral :anticlockwise :clockwise :node-type :connection :move-offset :intersection :max-node-id :mouse-position :graph :last-node-added :selected-nodes :edges :action :verb :description :remove :f :points :compatibilities :set]}, :doc "This namespace contains functions for manipulating\n  the state of the phase space and its associated objects"}