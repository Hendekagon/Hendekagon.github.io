;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dynomics.space.core, :imports nil, :requires {lg loom.graph, loom.graph loom.graph, la loom.alg, loom.alg loom.alg, cs clojure.set, clojure.set clojure.set}, :uses nil, :defs {dot {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 33, :column 7, :end-line 33, :end-column 10, :arglists (quote ([& x])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(x)], :arglists ([& x]), :arglists-meta (nil)}}, :name dynomics.space.core/dot, :variadic true, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(x)], :arglists ([& x]), :arglists-meta (nil)}, :method-params [(x)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists ([& x])}, mirror-node {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([[x y] path {node-scale :node-scale, :as space}])), :doc "Returns the pair of control points with\n  mirrored positions for the given control point"}, :name dynomics.space.core/mirror-node, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 18, :method-params ([p__379776 path p__379777]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y] path {node-scale :node-scale, :as space}])), :doc "Returns the pair of control points with\n  mirrored positions for the given control point"}, quadrant-info {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 258, :column 7, :end-line 258, :end-column 20, :arglists (quote ([nodez nodes]))}, :name dynomics.space.core/quadrant-info, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 20, :method-params ([nodez nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodez nodes]))}, add-node {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 170, :column 7, :end-line 170, :end-column 15, :arglists (quote ([{{:keys [nodes max-node-id]} :space, p :mouse-position, :as state}])), :doc "Adds a new node at the given mouse position"}, :name dynomics.space.core/add-node, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 15, :method-params ([p__379807]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes max-node-id]} :space, p :mouse-position, :as state}])), :doc "Adds a new node at the given mouse position"}, dmp {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 30, :column 7, :end-line 30, :end-column 10, :arglists (quote ([points]))}, :name dynomics.space.core/dmp, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 10, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, make-phase-space {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 246, :column 7, :end-line 246, :end-column 23, :arglists (quote ([]))}, :name dynomics.space.core/make-phase-space, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, just-ids {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 256, :column 7, :end-line 256, :end-column 15, :arglists (quote ([nodes]))}, :name dynomics.space.core/just-ids, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 15, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes]))}, spiral-system {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 236, :column 7, :end-line 236, :end-column 20, :arglists (quote ([n-points expansion rotation]))}, :name dynomics.space.core/spiral-system, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 20, :method-params ([n-points expansion rotation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n-points expansion rotation]))}, quadrants-types-by-position {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 137, :column 7, :end-line 137, :end-column 34, :arglists (quote ([{r1 :node-type, p1 :position} {r2 :node-type, p2 :position}])), :doc "\n  Returns the quadrant types of the given vectors\n  e.g. (quadrants-types-by-position {:node-type 10 :position [1 0]} {:node-type 5 :position [-1 0]})\n  => ((1 2) (1 2))\n  "}, :name dynomics.space.core/quadrants-types-by-position, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 34, :method-params ([p__379788 p__379789]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{r1 :node-type, p1 :position} {r2 :node-type, p2 :position}])), :doc "\n  Returns the quadrant types of the given vectors\n  e.g. (quadrants-types-by-position {:node-type 10 :position [1 0]} {:node-type 5 :position [-1 0]})\n  => ((1 2) (1 2))\n  "}, to-local {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([[x y] [_ _ nid _ cid] {node-scale :node-scale, :as space}]))}, :name dynomics.space.core/to-local, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 15, :method-params ([p__379763 p__379764 p__379765]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y] [_ _ nid _ cid] {node-scale :node-scale, :as space}]))}, make-ds {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 229, :column 7, :end-line 229, :end-column 14, :arglists (quote ([] [v])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}}, :name dynomics.space.core/make-ds, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}, :method-params ([] [v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists ([] [v])}, add-compatability-info {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 263, :column 7, :end-line 263, :end-column 29, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}]))}, :name dynomics.space.core/add-compatability-info, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 29, :method-params ([p__379877]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}]))}, I {:name dynomics.space.core/I, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 16, :column 1, :end-line 16, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 16, :column 6, :end-line 16, :end-column 7}}, remove-edges {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 199, :column 7, :end-line 199, :end-column 19, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Returns the state with the given edges removed"}, :name dynomics.space.core/remove-edges, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 19, :method-params ([p__379826]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Returns the state with the given edges removed"}, c+ {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 28, :column 7, :end-line 28, :end-column 9, :arglists (quote ([a b]))}, :name dynomics.space.core/c+, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 9, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, simplify-connections {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 282, :column 7, :end-line 282, :end-column 27, :arglists (quote ([[{:keys [nodes edges]}]]))}, :name dynomics.space.core/simplify-connections, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 27, :method-params ([p__379902]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{:keys [nodes edges]}]]))}, PI {:name dynomics.space.core/PI, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 22, :column 1, :end-line 22, :end-column 8, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 22, :column 6, :end-line 22, :end-column 8}}, default-connections {:name dynomics.space.core/default-connections, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 154, :column 1, :end-line 154, :end-column 25, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 154, :column 6, :end-line 154, :end-column 25}}, connections-by-vector {:name dynomics.space.core/connections-by-vector, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 151, :column 1, :end-line 151, :end-column 27, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 151, :column 6, :end-line 151, :end-column 27}}, P {:name dynomics.space.core/P, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 10, :column 1, :end-line 10, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 10, :column 6, :end-line 10, :end-column 7}}, J {:name dynomics.space.core/J, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 14, :column 1, :end-line 14, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 14, :column 6, :end-line 14, :end-column 7}}, deselect-all {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 182, :column 7, :end-line 182, :end-column 19, :arglists (quote ([state]))}, :name dynomics.space.core/deselect-all, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, C {:name dynomics.space.core/C, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 12, :column 1, :end-line 12, :end-column 7, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 12, :column 6, :end-line 12, :end-column 7}}, c* {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 26, :column 7, :end-line 26, :end-column 9, :arglists (quote ([[ar ai] [br bi]]))}, :name dynomics.space.core/c*, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 9, :method-params ([p__379749 p__379750]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[ar ai] [br bi]]))}, node-types {:name dynomics.space.core/node-types, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 58, :column 1, :end-line 58, :end-column 16, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 58, :column 6, :end-line 58, :end-column 16}}, PI2 {:name dynomics.space.core/PI2, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 24, :column 1, :end-line 24, :end-column 9, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 24, :column 6, :end-line 24, :end-column 9}}, compare-quadrants {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 148, :column 7, :end-line 148, :end-column 24, :arglists (quote ([qs]))}, :name dynomics.space.core/compare-quadrants, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 24, :method-params ([qs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qs]))}, remove-selected-nodes {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 210, :column 7, :end-line 210, :end-column 28, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Removes the selected nodes and their edges"}, :name dynomics.space.core/remove-selected-nodes, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 28, :method-params ([p__379843]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Removes the selected nodes and their edges"}, round {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 18, :column 6, :end-line 18, :end-column 11}, :name dynomics.space.core/round, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists nil}, set-node-type {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 186, :column 7, :end-line 186, :end-column 20, :arglists (quote ([id])), :doc "Returns a function to set the given selected nodes\n  to the given node type id"}, :name dynomics.space.core/set-node-type, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 20, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns a function to set the given selected nodes\n  to the given node type id"}, make-intersection-node {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 158, :column 7, :end-line 158, :end-column 29, :arglists (quote ([type-id] [type-id position])), :doc "Returns a node of the given type", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type-id] [type-id position]), :arglists ([type-id] [type-id position]), :arglists-meta (nil nil)}}, :name dynomics.space.core/make-intersection-node, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type-id] [type-id position]), :arglists ([type-id] [type-id position]), :arglists-meta (nil nil)}, :method-params ([type-id] [type-id position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists ([type-id] [type-id position]), :doc "Returns a node of the given type"}, make-connections {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 267, :column 7, :end-line 267, :end-column 23, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}]))}, :name dynomics.space.core/make-connections, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 23, :method-params ([p__379886]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}]))}, abs {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 20, :column 6, :end-line 20, :end-column 9}, :name dynomics.space.core/abs, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 9, :method-params ([x]), :protocol-impl nil, :arglists-meta (), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists nil}, update-ds {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 224, :column 7, :end-line 224, :end-column 16, :arglists (quote ([{:keys [f], :as s}]))}, :name dynomics.space.core/update-ds, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 16, :method-params ([p__379857]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [f], :as s}]))}, make-some-nodes {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 241, :column 7, :end-line 241, :end-column 22, :arglists (quote ([n]))}, :name dynomics.space.core/make-some-nodes, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, simplify-connection {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 280, :column 7, :end-line 280, :end-column 26, :arglists (quote ([[_ _ nid _ cid]]))}, :name dynomics.space.core/simplify-connection, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 26, :method-params ([p__379899]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[_ _ nid _ cid]]))}, add-graph {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 221, :column 7, :end-line 221, :end-column 16, :arglists (quote ([{edges :edges, :as space}]))}, :name dynomics.space.core/add-graph, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 16, :method-params ([p__379852]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{edges :edges, :as space}]))}, insert-in {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :line 285, :column 7, :end-line 285, :end-column 16, :arglists (quote ([v i x]))}, :name dynomics.space.core/insert-in, :variadic false, :file "/home/mchadwick/projects/dynomics/src/dynomics/space/core.cljc", :end-column 16, :method-params ([v i x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v i x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:description :move-offset :last-node-added :clockwise :intersection :remove :max-node-id :space :rotation :stability :verb :octants :node-scale :repellor :mouse-position :type :stable :points :node-type :unstable :compatabilities :attractor :saddle :nodes :id :graph :position :f :action :anticlockwise :quadrants :connections :selected-nodes :set :connection :edges :spiral}, :order [:node-scale :nodes :position :space :connections :stability :type :id :octants :quadrants :stable :attractor :unstable :repellor :saddle :rotation :spiral :anticlockwise :clockwise :node-type :connection :move-offset :intersection :max-node-id :mouse-position :graph :last-node-added :selected-nodes :action :verb :description :set :edges :remove :f :points :compatabilities]}, :doc "This namespace contains functions for manipulating\n  the state of the phase space and its associated objects"}