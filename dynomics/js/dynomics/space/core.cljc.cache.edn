;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name dynomics.space.core, :imports nil, :requires {lg loom.graph, loom.graph loom.graph, la loom.alg, loom.alg loom.alg, svg dynomics.ui.svg, dynomics.ui.svg dynomics.ui.svg, dynomics.space.graph dynomics.space.graph, cs clojure.set, clojure.set clojure.set}, :uses {simplify-edges dynomics.space.graph, as-connections dynomics.space.graph}, :defs {dot {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 53, :column 7, :end-line 53, :end-column 10, :arglists (quote ([& x])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(x)], :arglists ([& x]), :arglists-meta (nil)}}, :name dynomics.space.core/dot, :variadic true, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(x)], :arglists ([& x]), :arglists-meta (nil)}, :method-params [(x)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists ([& x])}, random-points {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 302, :column 7, :end-line 302, :end-column 20, :arglists (quote ([n]))}, :name dynomics.space.core/random-points, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, quadrant-vectors-by-connectors {:name dynomics.space.core/quadrant-vectors-by-connectors, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 175, :column 1, :end-line 175, :end-column 36, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 175, :column 6, :end-line 175, :end-column 36}}, update-compatibility-info {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 241, :column 7, :end-line 241, :end-column 32, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id])), :doc "Following a node-type change, update the\n  compatibility info for its connections", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists-meta (nil nil)}}, :name dynomics.space.core/update-compatibility-info, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :arglists-meta (nil nil)}, :method-params ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 2, :fn-var true, :arglists ([{{:keys [selected-nodes]} :space, :as state}] [{{:keys [graph edges nodes]} :space, :as state} id]), :doc "Following a node-type change, update the\n  compatibility info for its connections"}, mirror-node {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([[x y] path {node-scale :node-scale, :as space}])), :doc "Returns the pair of control points with\n  mirrored positions for the given control point"}, :name dynomics.space.core/mirror-node, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 18, :method-params ([p__650642 path p__650643]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y] path {node-scale :node-scale, :as space}])), :doc "Returns the pair of control points with\n  mirrored positions for the given control point"}, r2d {:name dynomics.space.core/r2d, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 39, :column 1, :end-line 39, :end-column 9, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 39, :column 6, :end-line 39, :end-column 9}}, quadrant-info {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 211, :column 7, :end-line 211, :end-column 20, :arglists (quote ([nodes [_ _ nid _ cid]]))}, :name dynomics.space.core/quadrant-info, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 20, :method-params ([nodes p__650672]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodes [_ _ nid _ cid]]))}, grid-points {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 305, :column 7, :end-line 305, :end-column 18, :arglists (quote ([n] [nx ny])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [nx ny]), :arglists ([n] [nx ny]), :arglists-meta (nil nil)}}, :name dynomics.space.core/grid-points, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [nx ny]), :arglists ([n] [nx ny]), :arglists-meta (nil nil)}, :method-params ([n] [nx ny]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 2, :fn-var true, :arglists ([n] [nx ny])}, add-node {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 255, :column 7, :end-line 255, :end-column 15, :arglists (quote ([{{:keys [nodes max-node-id]} :space, p :mouse-position, :as state}])), :doc "Adds a new node at the given mouse position"}, :name dynomics.space.core/add-node, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 15, :method-params ([p__650710]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes max-node-id]} :space, p :mouse-position, :as state}])), :doc "Adds a new node at the given mouse position"}, dmp {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 50, :column 7, :end-line 50, :end-column 10, :arglists (quote ([points]))}, :name dynomics.space.core/dmp, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 10, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, make-phase-space {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 335, :column 7, :end-line 335, :end-column 23, :arglists (quote ([]))}, :name dynomics.space.core/make-phase-space, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, just-ids {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 209, :column 7, :end-line 209, :end-column 15, :arglists (quote ([nodes]))}, :name dynomics.space.core/just-ids, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 15, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes]))}, quadrants-types-by-position {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 159, :column 7, :end-line 159, :end-column 34, :arglists (quote ([{r1 :node-type, p1 :position}])), :doc "\n  Returns the quadrant types of the given vectors\n  e.g. (quadrants-types-by-position {:node-type 10 :position [1 0]} {:node-type 5 :position [-1 0]})\n  => ((1 2) (1 2))\n\n  TODO need to return the types in the right order, as this\n  will give a false-positive when 2 nodes of the same type are\n  connected by the same connectors, as it doesn't take into account\n  that the nodes themselves are above and below eachother\n  "}, :name dynomics.space.core/quadrants-types-by-position, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 34, :method-params ([p__650654]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{r1 :node-type, p1 :position}])), :doc "\n  Returns the quadrant types of the given vectors\n  e.g. (quadrants-types-by-position {:node-type 10 :position [1 0]} {:node-type 5 :position [-1 0]})\n  => ((1 2) (1 2))\n\n  TODO need to return the types in the right order, as this\n  will give a false-positive when 2 nodes of the same type are\n  connected by the same connectors, as it doesn't take into account\n  that the nodes themselves are above and below eachother\n  "}, to-local {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([[x y] [_ _ nid _ cid] {node-scale :node-scale, :as space}]))}, :name dynomics.space.core/to-local, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 15, :method-params ([p__650629 p__650630 p__650631]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y] [_ _ nid _ cid] {node-scale :node-scale, :as space}]))}, make-ds {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 309, :column 7, :end-line 309, :end-column 14, :arglists (quote ([] [v])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}}, :name dynomics.space.core/make-ds, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}, :method-params ([] [v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists ([] [v])}, with-compatibilities {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 388, :column 7, :end-line 388, :end-column 27, :arglists (quote ([{[[nid1 nid2] & _] :points, :as e} compatibilities]))}, :name dynomics.space.core/with-compatibilities, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 27, :method-params ([p__650817 compatibilities]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 388, :end-line 388, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{[[nid1 nid2] & _] :points, :as e} compatibilities]))}, I {:name dynomics.space.core/I, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 21, :column 1, :end-line 21, :end-column 7, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 21, :column 6, :end-line 21, :end-column 7}}, edge-pairs-by-node {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 436, :column 7, :end-line 436, :end-column 25, :arglists (quote ([{:keys [nodes connections-by-node node-scale]}]))}, :name dynomics.space.core/edge-pairs-by-node, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 25, :method-params ([p__650875]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [nodes connections-by-node node-scale]}]))}, cos {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 25, :column 7, :end-line 25, :end-column 10, :arglists (quote ([x]))}, :name dynomics.space.core/cos, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, remove-edges {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 270, :column 7, :end-line 270, :end-column 19, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Returns the state with the given edges removed"}, :name dynomics.space.core/remove-edges, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 19, :method-params ([p__650719]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Returns the state with the given edges removed"}, F {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 15, :column 7, :end-line 15, :end-column 8, :arglists (quote ([f y]))}, :name dynomics.space.core/F, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 8, :method-params ([f y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f y]))}, unit {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 29, :column 7, :end-line 29, :end-column 11, :arglists (quote ([x]))}, :name dynomics.space.core/unit, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, c+ {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 48, :column 7, :end-line 48, :end-column 9, :arglists (quote ([a b]))}, :name dynomics.space.core/c+, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 9, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, edge-points {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 392, :column 7, :end-line 392, :end-column 18, :arglists (quote ([nodes [[_ _ nid1 _ cid1] [_ _ nid2 _ cid2]]]))}, :name dynomics.space.core/edge-points, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 18, :method-params ([nodes p__650826]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodes [[_ _ nid1 _ cid1] [_ _ nid2 _ cid2]]]))}, simplify-connections {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 382, :column 7, :end-line 382, :end-column 27, :arglists (quote ([[{:keys [nodes edges]}]]))}, :name dynomics.space.core/simplify-connections, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 27, :method-params ([p__650802]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[{:keys [nodes edges]}]]))}, PI {:name dynomics.space.core/PI, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 33, :column 1, :end-line 33, :end-column 8, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 33, :column 6, :end-line 33, :end-column 8}}, reverse-edge {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 428, :column 7, :end-line 428, :end-column 19, :arglists (quote ([{[ids p1 p2 cx cy] :points, c :connections}]))}, :name dynomics.space.core/reverse-edge, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 19, :method-params ([p__650868]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 428, :end-line 428, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[ids p1 p2 cx cy] :points, c :connections}]))}, default-connections {:name dynomics.space.core/default-connections, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 193, :column 1, :end-line 193, :end-column 25, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 193, :column 6, :end-line 193, :end-column 25}}, make-ds2 {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 316, :column 7, :end-line 316, :end-column 15, :arglists (quote ([f n-points]))}, :name dynomics.space.core/make-ds2, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 15, :method-params ([f n-points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f n-points]))}, connections-by-vector {:name dynomics.space.core/connections-by-vector, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 190, :column 1, :end-line 190, :end-column 27, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 190, :column 6, :end-line 190, :end-column 27}}, P {:name dynomics.space.core/P, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 13, :column 1, :end-line 13, :end-column 7, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 13, :column 6, :end-line 13, :end-column 7}}, J {:name dynomics.space.core/J, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 19, :column 1, :end-line 19, :end-column 7, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 19, :column 6, :end-line 19, :end-column 7}}, deselect-all {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 267, :column 7, :end-line 267, :end-column 19, :arglists (quote ([state]))}, :name dynomics.space.core/deselect-all, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, connections-of-node {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 226, :column 7, :end-line 226, :end-column 26, :arglists (quote ([graph edges id]))}, :name dynomics.space.core/connections-of-node, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 26, :method-params ([graph edges id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph edges id]))}, C {:name dynomics.space.core/C, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 17, :column 1, :end-line 17, :end-column 7, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 17, :column 6, :end-line 17, :end-column 7}}, c* {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 45, :column 7, :end-line 45, :end-column 9, :arglists (quote ([[ar ai] [br bi]]))}, :name dynomics.space.core/c*, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 9, :method-params ([p__650615 p__650616]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[ar ai] [br bi]]))}, node-types {:name dynomics.space.core/node-types, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 80, :column 1, :end-line 80, :end-column 16, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 80, :column 6, :end-line 80, :end-column 16}}, angle {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 41, :column 7, :end-line 41, :end-column 12, :arglists (quote ([[x y]]))}, :name dynomics.space.core/angle, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 12, :method-params ([p__650609]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y]]))}, PI2 {:name dynomics.space.core/PI2, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 35, :column 1, :end-line 35, :end-column 9, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 35, :column 6, :end-line 35, :end-column 9}}, compare-quadrants {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 187, :column 7, :end-line 187, :end-column 24, :arglists (quote ([qs]))}, :name dynomics.space.core/compare-quadrants, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 24, :method-params ([qs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qs]))}, remove-selected-nodes {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 281, :column 7, :end-line 281, :end-column 28, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Removes the selected nodes and their edges"}, :name dynomics.space.core/remove-selected-nodes, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 28, :method-params ([p__650736]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [selected-nodes]} :space, :as state}])), :doc "Removes the selected nodes and their edges"}, p2c {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 43, :column 7, :end-line 43, :end-column 10, :arglists (quote ([[r theta]]))}, :name dynomics.space.core/p2c, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 10, :method-params ([p__650612]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[r theta]]))}, round {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 23, :column 7, :end-line 23, :end-column 12, :arglists (quote ([x]))}, :name dynomics.space.core/round, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, set-node-type {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 363, :column 7, :end-line 363, :end-column 20, :arglists (quote ([id])), :doc "Returns a function to set the given selected nodes\n  to the given node type id"}, :name dynomics.space.core/set-node-type, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 20, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 363, :end-line 363, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns a function to set the given selected nodes\n  to the given node type id"}, make-intersection-node {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 197, :column 7, :end-line 197, :end-column 29, :arglists (quote ([type-id] [type-id position])), :doc "Returns a node of the given type", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type-id] [type-id position]), :arglists ([type-id] [type-id position]), :arglists-meta (nil nil)}}, :name dynomics.space.core/make-intersection-node, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type-id] [type-id position]), :arglists ([type-id] [type-id position]), :arglists-meta (nil nil)}, :method-params ([type-id] [type-id position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 2, :fn-var true, :arglists ([type-id] [type-id position]), :doc "Returns a node of the given type"}, PIb4 {:name dynomics.space.core/PIb4, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 37, :column 1, :end-line 37, :end-column 10, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 37, :column 6, :end-line 37, :end-column 10}}, quadrant-types-by-connector-pair {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 180, :column 7, :end-line 180, :end-column 39, :arglists (quote ([node-type quadrant-vector]))}, :name dynomics.space.core/quadrant-types-by-connector-pair, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 39, :method-params ([node-type quadrant-vector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node-type quadrant-vector]))}, make-connections {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 346, :column 7, :end-line 346, :end-column 23, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "Returns the given state with any connections that need to be\n  made added to the edges map. Only connect nodes if there are two\n  selected. Note that the connection is undirected"}, :name dynomics.space.core/make-connections, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 23, :method-params ([p__650776]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "Returns the given state with any connections that need to be\n  made added to the edges map. Only connect nodes if there are two\n  selected. Note that the connection is undirected"}, abs {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 31, :column 7, :end-line 31, :end-column 10, :arglists (quote ([x]))}, :name dynomics.space.core/abs, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, sqrd {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 55, :column 7, :end-line 55, :end-column 11, :arglists (quote ([v]))}, :name dynomics.space.core/sqrd, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, update-ds {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 297, :column 7, :end-line 297, :end-column 16, :arglists (quote ([{:keys [f], :as s}]))}, :name dynomics.space.core/update-ds, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 16, :method-params ([p__650750]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [f], :as s}]))}, add-compatibility-info {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 215, :column 7, :end-line 215, :end-column 29, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "\n  Returns the given state with a map of node-node compatibilities added,\n  of the form {[nodeid1 nodeid2] true [nodeid4 nodeid5] false}\n  "}, :name dynomics.space.core/add-compatibility-info, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 29, :method-params ([p__650675]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes selected-nodes]} :space, :as state}])), :doc "\n  Returns the given state with a map of node-node compatibilities added,\n  of the form {[nodeid1 nodeid2] true [nodeid4 nodeid5] false}\n  "}, make-open-regions {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 404, :column 7, :end-line 404, :end-column 24, :arglists (quote ([node-scale [node-id node-type edge-pairs]]))}, :name dynomics.space.core/make-open-regions, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 24, :method-params ([node-scale p__650841]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node-scale [node-id node-type edge-pairs]]))}, make-some-nodes {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 330, :column 7, :end-line 330, :end-column 22, :arglists (quote ([n]))}, :name dynomics.space.core/make-some-nodes, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, sin {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 27, :column 7, :end-line 27, :end-column 10, :arglists (quote ([x]))}, :name dynomics.space.core/sin, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, simplify-connection {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 380, :column 7, :end-line 380, :end-column 26, :arglists (quote ([[_ _ nid _ cid]]))}, :name dynomics.space.core/simplify-connection, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 26, :method-params ([p__650799]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[_ _ nid _ cid]]))}, add-connections-by-node {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 234, :column 7, :end-line 234, :end-column 30, :arglists (quote ([{{:keys [nodes edges graph]} :space, :as state}]))}, :name dynomics.space.core/add-connections-by-node, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 30, :method-params ([p__650684]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{:keys [nodes edges graph]} :space, :as state}]))}, add-graph {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 294, :column 7, :end-line 294, :end-column 16, :arglists (quote ([{edges :edges, :as space}]))}, :name dynomics.space.core/add-graph, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 16, :method-params ([p__650745]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{edges :edges, :as space}]))}, insert-in {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 385, :column 7, :end-line 385, :end-column 16, :arglists (quote ([v i x]))}, :name dynomics.space.core/insert-in, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 16, :method-params ([v i x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v i x]))}, ds-evolution {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :line 323, :column 7, :end-line 323, :end-column 19, :arglists (quote ([n-time-points expansion rotation] [n-time-points system])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n-time-points expansion rotation] [n-time-points system]), :arglists ([n-time-points expansion rotation] [n-time-points system]), :arglists-meta (nil nil)}}, :name dynomics.space.core/ds-evolution, :variadic false, :file "/Users/onto/projects/Dynomics/src/dynomics/space/core.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n-time-points expansion rotation] [n-time-points system]), :arglists ([n-time-points expansion rotation] [n-time-points system]), :arglists-meta (nil nil)}, :method-params ([n-time-points expansion rotation] [n-time-points system]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 3, :fn-var true, :arglists ([n-time-points expansion rotation] [n-time-points system])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:description :move-offset :last-node-added :clockwise :intersection :remove :max-node-id :space :rotation :stability :verb :octants :node-scale :repellor :mouse-position :type :stable :points :node-type :unstable :compatible? :attractor :compatibilities :saddle :nodes :node-id :id :graph :quadrant-type :quadrant-vector :position :f :action :anticlockwise :quadrants :connections :selected-nodes :set :connection :connections-by-node :edges :spiral}, :order [:node-scale :nodes :position :space :connections :stability :type :id :octants :quadrants :stable :attractor :unstable :repellor :saddle :rotation :spiral :anticlockwise :clockwise :node-type :connection :move-offset :intersection :selected-nodes :compatibilities :edges :graph :connections-by-node :max-node-id :mouse-position :last-node-added :action :verb :description :remove :f :points :set :compatible? :node-id :quadrant-type :quadrant-vector]}, :doc "This namespace contains functions for manipulating\n  the state of the phase space and its associated objects"}