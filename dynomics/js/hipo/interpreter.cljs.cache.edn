;; Analyzed by ClojureScript 1.7.170
{:use-macros {intercept hipo.interceptor}, :excludes #{}, :name hipo.interpreter, :imports nil, :requires {set clojure.set, clojure.set clojure.set, dom hipo.dom, hipo.dom hipo.dom, f hipo.fast, hipo.fast hipo.fast, hic hipo.hiccup, hipo.hiccup hipo.hiccup}, :uses nil, :defs {append-to-parent {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 63, :column 7, :end-line 63, :end-column 23, :arglists (quote ([el o]))}, :name hipo.interpreter/append-to-parent, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 23, :method-params ([el o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el o]))}, update-vector! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 167, :column 7, :end-line 167, :end-column 21, :arglists (quote ([el oh nh int]))}, :name hipo.interpreter/update-vector!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 21, :method-params ([el oh nh int]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 4, :fn-var true, :arglists (quote ([el oh nh int]))}, child-key {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 100, :column 8, :end-line 100, :end-column 17, :private true, :arglists (quote ([h]))}, :private true, :name hipo.interpreter/child-key, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 17, :method-params ([h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([h]))}, update-non-keyed-children! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 126, :column 7, :end-line 126, :end-column 33, :arglists (quote ([el och nch int]))}, :name hipo.interpreter/update-non-keyed-children!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 33, :method-params ([el och nch int]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 4, :fn-var true, :arglists (quote ([el och nch int]))}, append-children! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 28, :column 7, :end-line 28, :end-column 23, :arglists (quote ([el v]))}, :name hipo.interpreter/append-children!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 23, :method-params ([el v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el v]))}, update-attributes! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 83, :column 7, :end-line 83, :end-column 25, :arglists (quote ([el om nm int]))}, :name hipo.interpreter/update-attributes!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 25, :method-params ([el om nm int]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 4, :fn-var true, :arglists (quote ([el om nm int]))}, append-child! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 24, :column 7, :end-line 24, :end-column 20, :arglists (quote ([el o]))}, :name hipo.interpreter/append-child!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 20, :method-params ([el o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el o]))}, update-keyed-children! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 104, :column 7, :end-line 104, :end-column 29, :arglists (quote ([el och nch int]))}, :name hipo.interpreter/update-keyed-children!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 29, :method-params ([el och nch int]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 4, :fn-var true, :arglists (quote ([el och nch int]))}, create-for-update {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 193, :column 7, :end-line 193, :end-column 24, :arglists (quote ([el oh]))}, :name hipo.interpreter/create-for-update, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 24, :method-params ([el oh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el oh]))}, keyed-children? {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 156, :column 7, :end-line 156, :end-column 22, :arglists (quote ([v]))}, :name hipo.interpreter/keyed-children?, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, create {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 71, :column 7, :end-line 71, :end-column 13, :arglists (quote ([o]))}, :name hipo.interpreter/create, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 13, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, create-vector {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 37, :column 7, :end-line 37, :end-column 20, :arglists (quote ([h]))}, :name hipo.interpreter/create-vector, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 20, :method-params ([h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([h]))}, update-children! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 158, :column 7, :end-line 158, :end-column 23, :arglists (quote ([el och nch int]))}, :name hipo.interpreter/update-children!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 23, :method-params ([el och nch int]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 4, :fn-var true, :arglists (quote ([el och nch int]))}, mark-as-partially-compiled! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 50, :column 7, :end-line 50, :end-column 34, :arglists (quote ([el]))}, :name hipo.interpreter/mark-as-partially-compiled!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 34, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el]))}, create-child {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 56, :column 7, :end-line 56, :end-column 19, :arglists (quote ([o]))}, :name hipo.interpreter/create-child, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 19, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, set-attribute! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 8, :column 7, :end-line 8, :end-column 21, :arglists (quote ([el n ov nv]))}, :name hipo.interpreter/set-attribute!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 21, :method-params ([el n ov nv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 4, :fn-var true, :arglists (quote ([el n ov nv]))}, update! {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 184, :column 7, :end-line 184, :end-column 14, :arglists (quote ([el ph h int]))}, :name hipo.interpreter/update!, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 14, :method-params ([el ph h int]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 4, :fn-var true, :arglists (quote ([el ph h int]))}, keyed-children->indexed-map {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 102, :column 7, :end-line 102, :end-column 34, :arglists (quote ([v]))}, :name hipo.interpreter/keyed-children->indexed-map, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 34, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, keyed-children->map {:protocol-inline nil, :meta {:file "/home/mchadwick/projects/dynomics/public/js/hipo/interpreter.cljs", :line 101, :column 7, :end-line 101, :end-column 26, :arglists (quote ([v]))}, :name hipo.interpreter/keyed-children->map, :variadic false, :file "public/js/hipo/interpreter.cljs", :end-column 26, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}}, :require-macros {hipo.interceptor hipo.interceptor}, :cljs.analyzer/constants {:seen #{:update-attribute vector? :interceptor oh :key :index :replace :insert-at :name :value v :append o :update or hic/literal? nh nil? not :move-at :remove-trailing :update-children :target :remove-attribute h :clear}, :order [vector? v h or hic/literal? o not nil? :update-attribute :target :name :value :remove-attribute :key :move-at :index :insert-at :remove-trailing :append :clear oh nh :replace :update-children :interceptor :update]}, :doc nil}