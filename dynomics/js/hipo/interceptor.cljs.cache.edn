;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name hipo.interceptor, :imports nil, :requires nil, :uses nil, :defs {Interceptor {:meta {:file "/Users/onto/projects/Dynomics/public/js/hipo/interceptor.cljs", :line 3, :column 14, :end-line 3, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-intercept [[this t m]]}}}, :protocol-symbol true, :name hipo.interceptor/Interceptor, :file "public/js/hipo/interceptor.cljs", :end-column 25, :column 1, :line 3, :protocol-info {:methods {-intercept [[this t m]]}}, :info nil, :end-line 3, :impls #{hipo.interceptor/PerformanceInterceptor hipo.interceptor/TimeInterceptor hipo.interceptor/ProfileInterceptor}, :doc nil, :jsdoc ("@interface")}, -intercept {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/hipo/interceptor.cljs", :line 4, :column 4, :end-line 4, :end-column 14, :protocol hipo.interceptor/Interceptor, :doc nil, :arglists (quote ([this t m]))}, :protocol hipo.interceptor/Interceptor, :name hipo.interceptor/-intercept, :variadic false, :file "public/js/hipo/interceptor.cljs", :end-column 14, :method-params ([this t m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 4, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this t m])), :doc nil}, TimeInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/TimeInterceptor, :file "public/js/hipo/interceptor.cljs", :end-column 25, :type true, :column 10, :line 6, :record false, :end-line 6, :skip-protocol-flag nil}, ->TimeInterceptor {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/hipo/interceptor.cljs", :line 6, :column 10, :end-line 6, :end-column 25, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([s]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->TimeInterceptor, :variadic false, :file "public/js/hipo/interceptor.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :skip-protocol-flag nil}, ProfileInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/ProfileInterceptor, :file "public/js/hipo/interceptor.cljs", :end-column 28, :type true, :column 10, :line 15, :record false, :end-line 15, :skip-protocol-flag nil}, ->ProfileInterceptor {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/hipo/interceptor.cljs", :line 15, :column 10, :end-line 15, :end-column 28, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([label]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->ProfileInterceptor, :variadic false, :file "public/js/hipo/interceptor.cljs", :end-column 28, :method-params ([label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([label])), :skip-protocol-flag nil}, PerformanceInterceptor {:num-fields 1, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/PerformanceInterceptor, :file "public/js/hipo/interceptor.cljs", :end-column 32, :type true, :column 10, :line 26, :record false, :end-line 26, :skip-protocol-flag nil}, ->PerformanceInterceptor {:protocol-inline nil, :meta {:file "/Users/onto/projects/Dynomics/public/js/hipo/interceptor.cljs", :line 26, :column 10, :end-line 26, :end-column 32, :protocols #{hipo.interceptor/Interceptor}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([label]))}, :protocols #{hipo.interceptor/Interceptor}, :name hipo.interceptor/->PerformanceInterceptor, :variadic false, :file "public/js/hipo/interceptor.cljs", :end-column 32, :method-params ([label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([label])), :skip-protocol-flag nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:update s label}, :order [s :update label]}, :doc nil}